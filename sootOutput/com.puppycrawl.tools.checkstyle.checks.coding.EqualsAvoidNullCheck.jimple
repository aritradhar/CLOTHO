public class com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck extends com.puppycrawl.tools.checkstyle.api.Check
{
    private boolean mIgnoreEqualsIgnoreCase;

    public void <init>()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck this;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.api.Check: void <init>()>();

        return;
    }

    public int[] getDefaultTokens()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck this;
        int[] $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck;

        $r0 = newarray (int)[1];

        $r0[0] = 27;

        return $r0;
    }

    public void visitToken(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aMethodCall, dot, objCalledOn, method, expr, $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Object[] $r5, $r6;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck;

        aMethodCall := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        dot = virtualinvoke aMethodCall.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        $i0 = virtualinvoke dot.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i0 == 60 goto label1;

        return;

     label1:
        objCalledOn = virtualinvoke dot.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        $i1 = virtualinvoke objCalledOn.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i1 == 141 goto label2;

        $i2 = virtualinvoke objCalledOn.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i2 == 138 goto label2;

        $i3 = virtualinvoke objCalledOn.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i3 != 60 goto label3;

     label2:
        return;

     label3:
        method = virtualinvoke objCalledOn.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        $r0 = virtualinvoke dot.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        expr = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        $r1 = "equals";

        $r2 = virtualinvoke method.<com.puppycrawl.tools.checkstyle.api.DetailAST: java.lang.String getText()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

        $z5 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck: boolean containsOneArg(antlr.collections.AST)>(expr);

        if $z5 == 0 goto label4;

        $z6 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck: boolean containsAllSafeTokens(com.puppycrawl.tools.checkstyle.api.DetailAST)>(expr);

        if $z6 == 0 goto label4;

        $i6 = virtualinvoke aMethodCall.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i7 = virtualinvoke aMethodCall.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getColumnNo()>();

        $r6 = newarray (java.lang.Object)[0];

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck: void log(int,int,java.lang.String,java.lang.Object[])>($i6, $i7, "equals.avoid.null", $r6);

     label4:
        $z1 = this.<com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck: boolean mIgnoreEqualsIgnoreCase>;

        if $z1 != 0 goto label5;

        $r3 = "equalsIgnoreCase";

        $r4 = virtualinvoke method.<com.puppycrawl.tools.checkstyle.api.DetailAST: java.lang.String getText()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label5;

        $z4 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck: boolean containsOneArg(antlr.collections.AST)>(expr);

        if $z4 == 0 goto label5;

        $z3 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck: boolean containsAllSafeTokens(com.puppycrawl.tools.checkstyle.api.DetailAST)>(expr);

        if $z3 == 0 goto label5;

        $i5 = virtualinvoke aMethodCall.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i4 = virtualinvoke aMethodCall.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getColumnNo()>();

        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck: void log(int,int,java.lang.String,java.lang.Object[])>($i5, $i4, "equalsIgnoreCase.avoid.null", $r5);

     label5:
        return;
    }

    private boolean containsNoArgs(antlr.collections.AST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck this;
        antlr.collections.AST aExpr;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck;

        aExpr := @parameter0: antlr.collections.AST;

        if aExpr != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean containsMultiArgs(antlr.collections.AST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck this;
        antlr.collections.AST aExpr, comma;
        int $i0;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck;

        aExpr := @parameter0: antlr.collections.AST;

        comma = interfaceinvoke aExpr.<antlr.collections.AST: antlr.collections.AST getNextSibling()>();

        if comma == null goto label1;

        $i0 = interfaceinvoke comma.<antlr.collections.AST: int getType()>();

        if $i0 != 75 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean containsOneArg(antlr.collections.AST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck this;
        antlr.collections.AST aExpr;
        boolean $z0, $z1, $z2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck;

        aExpr := @parameter0: antlr.collections.AST;

        $z0 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck: boolean containsNoArgs(antlr.collections.AST)>(aExpr);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck: boolean containsMultiArgs(antlr.collections.AST)>(aExpr);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean containsAllSafeTokens(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aExpr, arg;
        boolean $z0, $z1, $z2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck;

        aExpr := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        arg = virtualinvoke aExpr.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        $z0 = virtualinvoke arg.<com.puppycrawl.tools.checkstyle.api.DetailAST: boolean branchContains(int)>(27);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        arg = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck: com.puppycrawl.tools.checkstyle.api.DetailAST skipVariableAssign(com.puppycrawl.tools.checkstyle.api.DetailAST)>(arg);

        $z1 = virtualinvoke arg.<com.puppycrawl.tools.checkstyle.api.DetailAST: boolean branchContains(int)>(100);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke arg.<com.puppycrawl.tools.checkstyle.api.DetailAST: boolean branchContains(int)>(59);

        if $z2 == 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    private com.puppycrawl.tools.checkstyle.api.DetailAST skipVariableAssign(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aCurrentAST, $r0, $r1, $r2;
        int $i0, $i1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck;

        aCurrentAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        $i0 = virtualinvoke aCurrentAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i0 != 81 goto label1;

        $r0 = virtualinvoke aCurrentAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        $i1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i1 != 59 goto label1;

        $r1 = virtualinvoke aCurrentAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        $r2 = virtualinvoke $r1.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        return $r2;

     label1:
        return aCurrentAST;
    }

    public void setIgnoreEqualsIgnoreCase(boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck this;
        boolean aNewValue;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck;

        aNewValue := @parameter0: boolean;

        this.<com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck: boolean mIgnoreEqualsIgnoreCase> = aNewValue;

        return;
    }
}
