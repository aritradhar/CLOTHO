public class com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck extends com.puppycrawl.tools.checkstyle.api.Check
{
    private static java.util.regex.Pattern sUnicodeRegexp;
    private static java.util.regex.Pattern sUnicodeControl;
    private static java.util.regex.Pattern sCommentRegexp;
    private static java.util.regex.Pattern sAllEscapedChars;
    private static java.util.regex.Pattern sNonPrintableChars;
    private boolean mAllowEscapesForControlCharacters;
    private boolean mAllowByTailComment;
    private boolean mAllowIfAllCharactersEscaped;
    private boolean mAllowNonPrintableEscapes;

    public void <init>()
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.api.Check: void <init>()>();

        return;
    }

    public final void setAllowEscapesForControlCharacters(boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;
        boolean aAllow;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        aAllow := @parameter0: boolean;

        this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: boolean mAllowEscapesForControlCharacters> = aAllow;

        return;
    }

    public final void setAllowByTailComment(boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;
        boolean aAllow;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        aAllow := @parameter0: boolean;

        this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: boolean mAllowByTailComment> = aAllow;

        return;
    }

    public final void setAllowIfAllCharactersEscaped(boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;
        boolean aAllow;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        aAllow := @parameter0: boolean;

        this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: boolean mAllowIfAllCharactersEscaped> = aAllow;

        return;
    }

    public final void setAllowNonPrintableEscapes(boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;
        boolean aAllow;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        aAllow := @parameter0: boolean;

        this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: boolean mAllowNonPrintableEscapes> = aAllow;

        return;
    }

    public int[] getDefaultTokens()
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;
        int[] $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        $r0 = newarray (int)[2];

        $r0[0] = 141;

        $r0[1] = 140;

        return $r0;
    }

    public void visitToken(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST;
        java.lang.String literal;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0;
        java.lang.Object[] $r0;
        java.util.regex.Pattern $r1, $r2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        literal = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: java.lang.String getText()>();

        $z0 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: boolean hasUnicodeChar(java.lang.String)>(literal);

        if $z0 == 0 goto label4;

        $z1 = this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: boolean mAllowByTailComment>;

        if $z1 == 0 goto label1;

        $z7 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: boolean hasTrailComment(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        if $z7 != 0 goto label4;

     label1:
        $z2 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: boolean isAllCharactersEscaped(java.lang.String)>(literal);

        if $z2 != 0 goto label4;

        $z3 = this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: boolean mAllowEscapesForControlCharacters>;

        if $z3 == 0 goto label2;

        $r2 = <com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: java.util.regex.Pattern sUnicodeControl>;

        $z6 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: boolean isOnlyUnicodeValidChars(java.lang.String,java.util.regex.Pattern)>(literal, $r2);

        if $z6 != 0 goto label4;

     label2:
        $z4 = this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: boolean mAllowNonPrintableEscapes>;

        if $z4 == 0 goto label3;

        $r1 = <com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: java.util.regex.Pattern sNonPrintableChars>;

        $z5 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: boolean isOnlyUnicodeValidChars(java.lang.String,java.util.regex.Pattern)>(literal, $r1);

        if $z5 != 0 goto label4;

     label3:
        $i0 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $r0 = newarray (java.lang.Object)[0];

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: void log(int,java.lang.String,java.lang.Object[])>($i0, "forbid.escaped.unicode.char", $r0);

     label4:
        return;
    }

    private boolean hasUnicodeChar(java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;
        java.lang.String aLiteral;
        java.util.regex.Pattern $r0;
        java.util.regex.Matcher $r1;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        aLiteral := @parameter0: java.lang.String;

        $r0 = <com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: java.util.regex.Pattern sUnicodeRegexp>;

        $r1 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(aLiteral);

        $z0 = virtualinvoke $r1.<java.util.regex.Matcher: boolean find()>();

        return $z0;
    }

    private boolean isOnlyUnicodeValidChars(java.lang.String, java.util.regex.Pattern)
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;
        java.lang.String aLiteral;
        java.util.regex.Pattern aPattern, $r0;
        int unicodeMatchesCounter, unicodeValidMatchesCouter, $i0;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        aLiteral := @parameter0: java.lang.String;

        aPattern := @parameter1: java.util.regex.Pattern;

        $r0 = <com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: java.util.regex.Pattern sUnicodeRegexp>;

        unicodeMatchesCounter = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: int countMatches(java.util.regex.Pattern,java.lang.String)>($r0, aLiteral);

        unicodeValidMatchesCouter = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: int countMatches(java.util.regex.Pattern,java.lang.String)>(aPattern, aLiteral);

        $i0 = unicodeMatchesCounter - unicodeValidMatchesCouter;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean hasTrailComment(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAst, variableDef, semi;
        boolean result, $z0;
        int lineNo, $i0, $i1;
        java.lang.String currentLine;
        java.lang.String[] $r0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        aAst := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        result = 0;

        variableDef = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: com.puppycrawl.tools.checkstyle.api.DetailAST getVariableDef(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAst);

        if variableDef == null goto label1;

        semi = virtualinvoke variableDef.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        $i1 = virtualinvoke semi.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i1 == 46 goto label2;

        semi = virtualinvoke variableDef.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        goto label2;

     label1:
        semi = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: com.puppycrawl.tools.checkstyle.api.DetailAST getSemi(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAst);

     label2:
        if semi == null goto label3;

        lineNo = virtualinvoke semi.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: java.lang.String[] getLines()>();

        $i0 = lineNo - 1;

        currentLine = $r0[$i0];

        if currentLine == null goto label3;

        $r1 = <com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: java.util.regex.Pattern sCommentRegexp>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(currentLine);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label3;

        result = 1;

     label3:
        return result;
    }

    private int countMatches(java.util.regex.Pattern, java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;
        java.util.regex.Pattern aPattern;
        java.lang.String aTarget;
        int matcherCounter;
        java.util.regex.Matcher matcher;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        aPattern := @parameter0: java.util.regex.Pattern;

        aTarget := @parameter1: java.lang.String;

        matcherCounter = 0;

        matcher = virtualinvoke aPattern.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(aTarget);

     label1:
        $z0 = virtualinvoke matcher.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        matcherCounter = matcherCounter + 1;

        goto label1;

     label2:
        return matcherCounter;
    }

    private com.puppycrawl.tools.checkstyle.api.DetailAST getVariableDef(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAst, result;
        int $i0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        aAst := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        result = virtualinvoke aAst.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getParent()>();

     label1:
        if result == null goto label2;

        $i0 = virtualinvoke result.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i0 == 10 goto label2;

        result = virtualinvoke result.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getParent()>();

        goto label1;

     label2:
        return result;
    }

    private com.puppycrawl.tools.checkstyle.api.DetailAST getSemi(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAst, result, $r0;
        int $i0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        aAst := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        result = virtualinvoke aAst.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getParent()>();

     label1:
        if result == null goto label2;

        $r0 = virtualinvoke result.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        $i0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i0 == 46 goto label2;

        result = virtualinvoke result.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getParent()>();

        goto label1;

     label2:
        if result == null goto label3;

        result = virtualinvoke result.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

     label3:
        return result;
    }

    private boolean isAllCharactersEscaped(java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck this;
        java.lang.String aLiteral, $r1;
        boolean $z0, $z1, $z2;
        java.util.regex.Pattern $r0;
        int $i0, $i1;
        java.util.regex.Matcher $r2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;

        aLiteral := @parameter0: java.lang.String;

        $z0 = this.<com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: boolean mAllowIfAllCharactersEscaped>;

        if $z0 == 0 goto label1;

        $r0 = <com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: java.util.regex.Pattern sAllEscapedChars>;

        $i0 = virtualinvoke aLiteral.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r1 = virtualinvoke aLiteral.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        $r2 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z1 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1, $r2, $r3, $r4;

        $r0 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: java.util.regex.Pattern getPattern(java.lang.String)>("\\\\u[a-fA-F0-9]{4}");

        <com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: java.util.regex.Pattern sUnicodeRegexp> = $r0;

        $r1 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: java.util.regex.Pattern getPattern(java.lang.String)>("\\\\(u|U)(00[0-1][0-1A-Fa-f]|00[8-9][0-9A-Fa-f]|034(f|F)|070(f|F)|180(e|E)|200[b-fB-F]|202[b-eB-E]|206[0-4a-fA-F]|[fF]{3}[9a-bA-B]|[fF][eE][fF]{2})");

        <com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: java.util.regex.Pattern sUnicodeControl> = $r1;

        $r2 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: java.util.regex.Pattern getPattern(java.lang.String)>(";[ ]*//+[a-zA-Z0-9 ]*|;[ ]*/[*]{1}+[a-zA-Z0-9 ]*");

        <com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: java.util.regex.Pattern sCommentRegexp> = $r2;

        $r3 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: java.util.regex.Pattern getPattern(java.lang.String)>("^((\\\\u)[a-fA-F0-9]{4}||\\\\b|\\\\t|\\\\n|\\\\f|\\\\r|\\\\|\\\"|\\\')+$");

        <com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: java.util.regex.Pattern sAllEscapedChars> = $r3;

        $r4 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: java.util.regex.Pattern getPattern(java.lang.String)>("\\\\u1680|\\\\u2028|\\\\u2029|\\\\u205(f|F)|\\\\u3000|\\\\u2007|\\\\u2000|\\\\u200(a|A)|\\\\u007(F|f)|\\\\u009(f|F)|\\\\u(f|F){4}|\\\\u007(F|f)|\\\\u00(a|A)(d|D)|\\\\u0600|\\\\u061(c|C)|\\\\u06(d|D){2}|\\\\u070(f|F)|\\\\u1680|\\\\u180(e|E)|\\\\u2000|\\\\u2028|\\\\u205(f|F)|\\\\u2066|\\\\u2067|\\\\u2068|\\\\u2069|\\\\u206(a|A)|\\\\u(d|D)800|\\\\u(f|F)(e|E)(f|F){2}|\\\\u(f|F){3}9|\\\\u(f|F){3}(a|A)|\\\\u0020|\\\\u00(a|A)0|\\\\u00(a|A)(d|D)|\\\\u0604|\\\\u061(c|C)|\\\\u06(d|D){2}|\\\\u070(f|F)|\\\\u1680|\\\\u180(e|E)|\\\\u200(f|F)|\\\\u202(f|F)|\\\\u2064|\\\\u2066|\\\\u2067|\\\\u2068|\\\\u2069|\\\\u206(f|F)|\\\\u(f|F)8(f|F){2}|\\\\u(f|F)(e|E)(f|F){2}|\\\\u(f|F){3}9|\\\\u(f|F){3}(b|B)|\\\\u05(d|D)0|\\\\u05(f|F)3|\\\\u0600|\\\\u0750|\\\\u0(e|E)00|\\\\u1(e|E)00|\\\\u2100|\\\\u(f|F)(b|B)50|\\\\u(f|F)(e|E)70|\\\\u(F|f){2}61|\\\\u04(f|F)9|\\\\u05(b|B)(e|E)|\\\\u05(e|E)(a|A)|\\\\u05(f|F)4|\\\\u06(f|F){2}|\\\\u077(f|F)|\\\\u0(e|E)7(f|F)|\\\\u20(a|A)(f|F)|\\\\u213(a|A)|\\\\u0000|\\\\u(f|F)(d|D)(f|F){2}|\\\\u(f|F)(e|E)(f|F){2}|\\\\u(f|F){2}(d|D)(c|C)|\\\\u2002|\\\\u0085|\\\\u200(a|A)|\\\\u2005|\\\\u2000|\\\\u2029|\\\\u000(B|b)|\\\\u2008|\\\\u2003|\\\\u205(f|F)|\\\\u1680|\\\\u0009|\\\\u0020|\\\\u2006|\\\\u2001|\\\\u202(f|F)|\\\\u00(a|A)0|\\\\u000(c|C)|\\\\u2009|\\\\u2004|\\\\u2028|\\\\u2028|\\\\u2007|\\\\u2004|\\\\u2028|\\\\u2007|\\\\u2025|\\\\u(f|F){2}0(e|E)|\\\\u(f|F){2}61");

        <com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck: java.util.regex.Pattern sNonPrintableChars> = $r4;

        return;
    }
}
