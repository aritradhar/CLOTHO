final class com.puppycrawl.tools.checkstyle.PropertyCacheFile extends java.lang.Object
{
    private static final java.lang.String CONFIG_HASH_KEY;
    private final java.lang.String mDetailsFile;
    private final java.util.Properties mDetails;
    private static final char[] HEX_CHARS;
    private static final int MASK_0X0F;
    private static final int SHIFT_4;

    void <init>(com.puppycrawl.tools.checkstyle.api.Configuration, java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.PropertyCacheFile this;
        com.puppycrawl.tools.checkstyle.api.Configuration aCurrentConfig;
        java.lang.String aFileName, currentConfigHash, cachedConfigHash, $r1;
        boolean setInActive, $z0;
        java.io.FileInputStream inStream, $r2;
        java.lang.Throwable l7, $r9;
        java.util.Properties $r0, $r3, $r4, $r5, $r7, $r11;
        java.io.IOException $r8, cachedConfigHash;
        org.apache.commons.logging.Log $r10;
        java.io.FileNotFoundException $r12;

        this := @this: com.puppycrawl.tools.checkstyle.PropertyCacheFile;

        aCurrentConfig := @parameter0: com.puppycrawl.tools.checkstyle.api.Configuration;

        aFileName := @parameter1: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.util.Properties mDetails> = $r0;

        setInActive = 1;

        if aFileName == null goto label10;

        inStream = null;

        currentConfigHash = specialinvoke this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.lang.String getConfigHashCode(java.io.Serializable)>(aCurrentConfig);

     label01:
        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.lang.String)>(aFileName);

        inStream = $r2;

        $r3 = this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.util.Properties mDetails>;

        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>(inStream);

        $r4 = this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.util.Properties mDetails>;

        cachedConfigHash = virtualinvoke $r4.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("configuration*?");

        setInActive = 0;

        if cachedConfigHash == null goto label02;

        $z0 = virtualinvoke cachedConfigHash.<java.lang.String: boolean equals(java.lang.Object)>(currentConfigHash);

        if $z0 != 0 goto label03;

     label02:
        $r5 = this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.util.Properties mDetails>;

        virtualinvoke $r5.<java.util.Properties: void clear()>();

        $r7 = this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.util.Properties mDetails>;

        virtualinvoke $r7.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("configuration*?", currentConfigHash);

     label03:
        staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: void closeQuietly(java.io.Closeable)>(inStream);

        goto label10;

     label04:
        $r12 := @caughtexception;

        setInActive = 0;

        $r11 = this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.util.Properties mDetails>;

        virtualinvoke $r11.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("configuration*?", currentConfigHash);

     label05:
        staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: void closeQuietly(java.io.Closeable)>(inStream);

        goto label10;

     label06:
        $r8 := @caughtexception;

        cachedConfigHash = $r8;

        $r10 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Unable to open cache file, ignoring.", cachedConfigHash);

     label07:
        staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: void closeQuietly(java.io.Closeable)>(inStream);

        goto label10;

     label08:
        $r9 := @caughtexception;

        l7 = $r9;

     label09:
        staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: void closeQuietly(java.io.Closeable)>(inStream);

        throw l7;

     label10:
        if setInActive == 0 goto label11;

        $r1 = null;

        goto label12;

     label11:
        $r1 = aFileName;

     label12:
        this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.lang.String mDetailsFile> = $r1;

        return;

        catch java.io.FileNotFoundException from label01 to label03 with label04;
        catch java.io.IOException from label01 to label03 with label06;
        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    void destroy()
    {
        com.puppycrawl.tools.checkstyle.PropertyCacheFile this;
        java.io.FileOutputStream out, $r1;
        java.io.IOException e, $r4;
        java.lang.Throwable l3, $r6;
        java.lang.String $r0, $r2;
        java.util.Properties $r3;
        org.apache.commons.logging.Log $r5;

        this := @this: com.puppycrawl.tools.checkstyle.PropertyCacheFile;

        $r0 = this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.lang.String mDetailsFile>;

        if $r0 == null goto label7;

        out = null;

     label1:
        $r1 = new java.io.FileOutputStream;

        $r2 = this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.lang.String mDetailsFile>;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.lang.String)>($r2);

        out = $r1;

        $r3 = this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.util.Properties mDetails>;

        virtualinvoke $r3.<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>(out, null);

     label2:
        specialinvoke this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: void flushAndCloseOutStream(java.io.OutputStream)>(out);

        goto label7;

     label3:
        $r4 := @caughtexception;

        e = $r4;

        $r5 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Unable to save cache file.", e);

     label4:
        specialinvoke this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: void flushAndCloseOutStream(java.io.OutputStream)>(out);

        goto label7;

     label5:
        $r6 := @caughtexception;

        l3 = $r6;

     label6:
        specialinvoke this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: void flushAndCloseOutStream(java.io.OutputStream)>(out);

        throw l3;

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void flushAndCloseOutStream(java.io.OutputStream)
    {
        com.puppycrawl.tools.checkstyle.PropertyCacheFile this;
        java.io.OutputStream aStream;
        java.io.IOException ex, $r1;
        java.lang.Throwable l3, $r0;
        org.apache.commons.logging.Log $r2;

        this := @this: com.puppycrawl.tools.checkstyle.PropertyCacheFile;

        aStream := @parameter0: java.io.OutputStream;

        if aStream == null goto label7;

     label1:
        virtualinvoke aStream.<java.io.OutputStream: void flush()>();

     label2:
        staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: void closeQuietly(java.io.Closeable)>(aStream);

        goto label7;

     label3:
        $r1 := @caughtexception;

        ex = $r1;

        $r2 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Unable to flush output stream.", ex);

     label4:
        staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: void closeQuietly(java.io.Closeable)>(aStream);

        goto label7;

     label5:
        $r0 := @caughtexception;

        l3 = $r0;

     label6:
        staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: void closeQuietly(java.io.Closeable)>(aStream);

        throw l3;

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    boolean alreadyChecked(java.lang.String, long)
    {
        com.puppycrawl.tools.checkstyle.PropertyCacheFile this;
        java.lang.String aFileName, lastChecked, $r1;
        long aTimestamp;
        java.util.Properties $r0;
        boolean $z0, $z1;

        this := @this: com.puppycrawl.tools.checkstyle.PropertyCacheFile;

        aFileName := @parameter0: java.lang.String;

        aTimestamp := @parameter1: long;

        $r0 = this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.util.Properties mDetails>;

        lastChecked = virtualinvoke $r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(aFileName);

        if lastChecked == null goto label1;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(aTimestamp);

        $z0 = virtualinvoke lastChecked.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    void checkedOk(java.lang.String, long)
    {
        com.puppycrawl.tools.checkstyle.PropertyCacheFile this;
        java.lang.String aFileName, $r1;
        long aTimestamp;
        java.util.Properties $r0;

        this := @this: com.puppycrawl.tools.checkstyle.PropertyCacheFile;

        aFileName := @parameter0: java.lang.String;

        aTimestamp := @parameter1: long;

        $r0 = this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.util.Properties mDetails>;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(aTimestamp);

        virtualinvoke $r0.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(aFileName, $r1);

        return;
    }

    private java.lang.String getConfigHashCode(java.io.Serializable)
    {
        com.puppycrawl.tools.checkstyle.PropertyCacheFile this;
        java.io.Serializable aConfiguration;
        java.io.ByteArrayOutputStream baos, $r0;
        java.io.ObjectOutputStream oos, $r1;
        java.lang.Throwable md, $r5;
        byte[] $r2, $r3;
        java.lang.String $r4, $r11;
        java.lang.Exception $r6, baos;
        org.apache.commons.logging.Log $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        long $l0;
        java.security.MessageDigest md;

        this := @this: com.puppycrawl.tools.checkstyle.PropertyCacheFile;

        aConfiguration := @parameter0: java.io.Serializable;

     label1:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        baos = $r0;

        oos = null;

     label2:
        $r1 = new java.io.ObjectOutputStream;

        specialinvoke $r1.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(baos);

        oos = $r1;

        virtualinvoke oos.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(aConfiguration);

     label3:
        specialinvoke this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: void flushAndCloseOutStream(java.io.OutputStream)>(oos);

        goto label6;

     label4:
        $r5 := @caughtexception;

        md = $r5;

     label5:
        specialinvoke this.<com.puppycrawl.tools.checkstyle.PropertyCacheFile: void flushAndCloseOutStream(java.io.OutputStream)>(oos);

        throw md;

     label6:
        md = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA");

        $r2 = virtualinvoke baos.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke md.<java.security.MessageDigest: void update(byte[])>($r2);

        $r3 = virtualinvoke md.<java.security.MessageDigest: byte[] digest()>();

        $r4 = staticinvoke <com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.lang.String hexEncode(byte[])>($r3);

     label7:
        return $r4;

     label8:
        $r6 := @caughtexception;

        baos = $r6;

        $r7 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Unable to calculate hashcode.", baos);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ALWAYS FRESH: ");

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.Exception from label1 to label7 with label8;
    }

    private static java.lang.String hexEncode(byte[])
    {
        byte[] aByteArray, arr$;
        java.lang.StringBuffer buf, $r0;
        int len$, i$, $i0, $i1;
        byte b, low, high, $b2;
        java.lang.String $r1;
        char[] $r2, $r4;
        char $c3, $c4;

        aByteArray := @parameter0: byte[];

        $r0 = new java.lang.StringBuffer;

        $i0 = lengthof aByteArray;

        $i1 = 2 * $i0;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i1);

        buf = $r0;

        arr$ = aByteArray;

        len$ = lengthof arr$;

        i$ = 0;

     label1:
        if i$ >= len$ goto label2;

        b = arr$[i$];

        low = b & 15;

        $b2 = b >> 4;

        high = $b2 & 15;

        $r2 = <com.puppycrawl.tools.checkstyle.PropertyCacheFile: char[] HEX_CHARS>;

        $c3 = $r2[high];

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $r4 = <com.puppycrawl.tools.checkstyle.PropertyCacheFile: char[] HEX_CHARS>;

        $c4 = $r4[low];

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        i$ = i$ + 1;

        goto label1;

     label2:
        $r1 = virtualinvoke buf.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    static void <clinit>()
    {
        char[] $r0;

        <com.puppycrawl.tools.checkstyle.PropertyCacheFile: int SHIFT_4> = 4;

        <com.puppycrawl.tools.checkstyle.PropertyCacheFile: int MASK_0X0F> = 15;

        <com.puppycrawl.tools.checkstyle.PropertyCacheFile: java.lang.String CONFIG_HASH_KEY> = "configuration*?";

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 65;

        $r0[11] = 66;

        $r0[12] = 67;

        $r0[13] = 68;

        $r0[14] = 69;

        $r0[15] = 70;

        <com.puppycrawl.tools.checkstyle.PropertyCacheFile: char[] HEX_CHARS> = $r0;

        return;
    }
}
