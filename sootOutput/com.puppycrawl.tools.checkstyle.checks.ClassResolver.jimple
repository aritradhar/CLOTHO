public class com.puppycrawl.tools.checkstyle.checks.ClassResolver extends java.lang.Object
{
    private final java.lang.String mPkg;
    private final java.util.Set mImports;
    private final java.lang.ClassLoader mLoader;

    public void <init>(java.lang.ClassLoader, java.lang.String, java.util.Set)
    {
        com.puppycrawl.tools.checkstyle.checks.ClassResolver this;
        java.lang.ClassLoader aLoader;
        java.lang.String aPkg;
        java.util.Set aImports, $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.ClassResolver;

        aLoader := @parameter0: java.lang.ClassLoader;

        aPkg := @parameter1: java.lang.String;

        aImports := @parameter2: java.util.Set;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.ClassLoader mLoader> = aLoader;

        this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.String mPkg> = aPkg;

        this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.util.Set mImports> = aImports;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.util.Set mImports>;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("java.lang.*");

        return;
    }

    public java.lang.Class resolve(java.lang.String, java.lang.String) throws java.lang.ClassNotFoundException
    {
        com.puppycrawl.tools.checkstyle.checks.ClassResolver this;
        java.lang.String aName, aCurrentClass, imp, fqn, $r1, $r2, $r3, $r9, $r13, $r14, $r19, $r21, $r28, $r31, $r32, i$;
        java.lang.Class clazz, $r5, $r20;
        java.util.Iterator i$;
        java.util.Set $r0, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object $r6, $r30;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r22, $r23, $r24, $r25, $r26, $r27, $r29, $r33, $r34;
        int $i0, $i1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.ClassResolver;

        aName := @parameter0: java.lang.String;

        aCurrentClass := @parameter1: java.lang.String;

        clazz = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.Class resolveQualifiedName(java.lang.String)>(aName);

        if clazz == null goto label01;

        return clazz;

     label01:
        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.util.Set mImports>;

        i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r30 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        imp = (java.lang.String) $r30;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(aName);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $z7 = virtualinvoke imp.<java.lang.String: boolean endsWith(java.lang.String)>($r32);

        if $z7 == 0 goto label03;

        clazz = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.Class resolveQualifiedName(java.lang.String)>(imp);

        if clazz == null goto label03;

        return clazz;

     label03:
        goto label02;

     label04:
        $r2 = "";

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.String mPkg>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 != 0 goto label05;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r28 = this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.String mPkg>;

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(aName);

        $r31 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        clazz = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.Class resolveQualifiedName(java.lang.String)>($r31);

        if clazz == null goto label05;

        return clazz;

     label05:
        $r3 = "";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(aCurrentClass);

        if $z2 != 0 goto label08;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = "";

        $r13 = this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.String mPkg>;

        $z5 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z5 != 0 goto label06;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.String mPkg>;

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label07;

     label06:
        $r21 = "";

     label07:
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(aCurrentClass);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r15 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(aName);

        i$ = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $z6 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: boolean isLoadable(java.lang.String)>(i$);

        if $z6 == 0 goto label08;

        $r20 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.Class safeLoad(java.lang.String)>(i$);

        return $r20;

     label08:
        $r4 = this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.util.Set mImports>;

        i$ = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r6 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        imp = (java.lang.String) $r6;

        $z4 = virtualinvoke imp.<java.lang.String: boolean endsWith(java.lang.String)>(".*");

        if $z4 == 0 goto label10;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $i1 = virtualinvoke imp.<java.lang.String: int lastIndexOf(int)>(46);

        $i0 = $i1 + 1;

        $r9 = virtualinvoke imp.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(aName);

        fqn = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        clazz = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.Class resolveQualifiedName(java.lang.String)>(fqn);

        if clazz == null goto label10;

        return clazz;

     label10:
        goto label09;

     label11:
        $r5 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.Class safeLoad(java.lang.String)>(aName);

        return $r5;
    }

    public boolean isLoadable(java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.ClassResolver this;
        java.lang.String aName;
        java.lang.ClassNotFoundException $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.ClassResolver;

        aName := @parameter0: java.lang.String;

     label1:
        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.Class safeLoad(java.lang.String)>(aName);

     label2:
        return 1;

     label3:
        $r1 := @caughtexception;

        return 0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public java.lang.Class safeLoad(java.lang.String) throws java.lang.ClassNotFoundException
    {
        com.puppycrawl.tools.checkstyle.checks.ClassResolver this;
        java.lang.String aName;
        java.lang.ClassLoader $r0;
        java.lang.Class $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.ClassResolver;

        aName := @parameter0: java.lang.String;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.ClassLoader mLoader>;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(aName, 0, $r0);

        return $r1;
    }

    private java.lang.Class resolveQualifiedName(java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.ClassResolver this;
        java.lang.String aName, innerName, $r1, $r4;
        int dot, $i0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r0, $r2, $r3, $r5;
        java.lang.Class $r6, $r8;
        java.lang.ClassNotFoundException $r7, dot;
        java.lang.RuntimeException $r9;

        this := @this: com.puppycrawl.tools.checkstyle.checks.ClassResolver;

        aName := @parameter0: java.lang.String;

     label1:
        $z0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: boolean isLoadable(java.lang.String)>(aName);

        if $z0 == 0 goto label3;

        $r8 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.Class safeLoad(java.lang.String)>(aName);

     label2:
        return $r8;

     label3:
        dot = virtualinvoke aName.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        if dot == -1 goto label5;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke aName.<java.lang.String: java.lang.String substring(int,int)>(0, dot);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $i0 = dot + 1;

        $r4 = virtualinvoke aName.<java.lang.String: java.lang.String substring(int)>($i0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        innerName = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: boolean isLoadable(java.lang.String)>(innerName);

        if $z1 == 0 goto label5;

        $r6 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.ClassResolver: java.lang.Class safeLoad(java.lang.String)>(innerName);

     label4:
        return $r6;

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        dot = $r7;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(dot);

        throw $r9;

     label7:
        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label6;
        catch java.lang.ClassNotFoundException from label3 to label4 with label6;
    }
}
