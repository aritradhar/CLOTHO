public abstract class com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler extends java.lang.Object
{
    private final com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck mIndentCheck;
    private final com.puppycrawl.tools.checkstyle.api.DetailAST mMainAst;
    private final java.lang.String mTypeName;
    private final com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler mParent;
    private com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel mLevel;

    public void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck, java.lang.String, com.puppycrawl.tools.checkstyle.api.DetailAST, com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this, aParent;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck aIndentCheck;
        java.lang.String aTypeName;
        com.puppycrawl.tools.checkstyle.api.DetailAST aExpr;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aIndentCheck := @parameter0: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck;

        aTypeName := @parameter1: java.lang.String;

        aExpr := @parameter2: com.puppycrawl.tools.checkstyle.api.DetailAST;

        aParent := @parameter3: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck mIndentCheck> = aIndentCheck;

        this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: java.lang.String mTypeName> = aTypeName;

        this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.api.DetailAST mMainAst> = aExpr;

        this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler mParent> = aParent;

        return;
    }

    public final com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r0, $r1, $r2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel mLevel>;

        if $r0 != null goto label1;

        $r2 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevelImpl()>();

        this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel mLevel> = $r2;

     label1:
        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel mLevel>;

        return $r1;
    }

    protected com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevelImpl()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this, $r0;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler mParent>;

        $r1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel suggestedChildLevel(com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler)>(this);

        return $r1;
    }

    public com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel suggestedChildLevel(com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this, aChild;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r0, $r1;
        int[] $r2;
        int $i0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aChild := @parameter0: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        $r0 = new com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        $r1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()>();

        $r2 = newarray (int)[1];

        $i0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int getBasicOffset()>();

        $r2[0] = $i0;

        specialinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,int[])>($r1, $r2);

        return $r0;
    }

    protected final void logError(com.puppycrawl.tools.checkstyle.api.DetailAST, java.lang.String, int)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAst;
        java.lang.String aSubtypeName;
        int aActualLevel;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aAst := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        aSubtypeName := @parameter1: java.lang.String;

        aActualLevel := @parameter2: int;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()>();

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void logError(com.puppycrawl.tools.checkstyle.api.DetailAST,java.lang.String,int,com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel)>(aAst, aSubtypeName, aActualLevel, $r0);

        return;
    }

    protected final void logError(com.puppycrawl.tools.checkstyle.api.DetailAST, java.lang.String, int, com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAst;
        java.lang.String aSubtypeName, typeStr, messageKey, $r0, $r4, $r8, $r11;
        int aActualLevel, $i0;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel aExpectedLevel;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r9, $r10;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r5;
        java.lang.Object[] $r7;
        java.lang.Integer $r12;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aAst := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        aSubtypeName := @parameter1: java.lang.String;

        aActualLevel := @parameter2: int;

        aExpectedLevel := @parameter3: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        $r0 = "";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(aSubtypeName);

        if $z0 == 0 goto label1;

        $r4 = "";

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(aSubtypeName);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        typeStr = $r4;

        messageKey = "indentation.error";

        $z1 = virtualinvoke aExpectedLevel.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: boolean isMultiLevel()>();

        if $z1 == 0 goto label3;

        messageKey = "indentation.error.multi";

     label3:
        $r5 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck mIndentCheck>;

        $i0 = virtualinvoke aAst.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $r7 = newarray (java.lang.Object)[3];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: java.lang.String mTypeName>;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(typeStr);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(aActualLevel);

        $r7[1] = $r12;

        $r7[2] = aExpectedLevel;

        virtualinvoke $r5.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: void indentationLog(int,java.lang.String,java.lang.Object[])>($i0, messageKey, $r7);

        return;
    }

    private void logChildError(int, int, com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        int aLine, aActualLevel;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel aExpectedLevel;
        java.lang.String messageKey, $r1;
        boolean $z0;
        java.lang.Object[] $r0;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r2;
        java.lang.Integer $r3;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aLine := @parameter0: int;

        aActualLevel := @parameter1: int;

        aExpectedLevel := @parameter2: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        messageKey = "indentation.child.error";

        $z0 = virtualinvoke aExpectedLevel.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: boolean isMultiLevel()>();

        if $z0 == 0 goto label1;

        messageKey = "indentation.child.error.multi";

     label1:
        $r2 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck mIndentCheck>;

        $r0 = newarray (java.lang.Object)[3];

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: java.lang.String mTypeName>;

        $r0[0] = $r1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(aActualLevel);

        $r0[1] = $r3;

        $r0[2] = aExpectedLevel;

        virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: void indentationLog(int,java.lang.String,java.lang.Object[])>(aLine, messageKey, $r0);

        return;
    }

    protected final boolean startsLine(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAst;
        int $i0, $i1;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aAst := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        $i0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int getLineStart(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAst);

        $i1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAst);

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static boolean areOnSameLine(com.puppycrawl.tools.checkstyle.api.DetailAST, com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.api.DetailAST aAst1, aAst2;
        int $i0, $i1;
        boolean $z0;

        aAst1 := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        aAst2 := @parameter1: com.puppycrawl.tools.checkstyle.api.DetailAST;

        if aAst1 == null goto label1;

        if aAst2 == null goto label1;

        $i0 = virtualinvoke aAst1.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i1 = virtualinvoke aAst2.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static com.puppycrawl.tools.checkstyle.api.DetailAST getFirstToken(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST, first, child, toTest;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        first = aAST;

        child = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

     label1:
        if child == null goto label4;

        toTest = staticinvoke <com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstToken(com.puppycrawl.tools.checkstyle.api.DetailAST)>(child);

        $i0 = virtualinvoke toTest.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i1 = virtualinvoke first.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        if $i0 < $i1 goto label2;

        $i2 = virtualinvoke toTest.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i3 = virtualinvoke first.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        if $i2 != $i3 goto label3;

        $i4 = virtualinvoke toTest.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getColumnNo()>();

        $i5 = virtualinvoke first.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getColumnNo()>();

        if $i4 >= $i5 goto label3;

     label2:
        first = toTest;

     label3:
        child = virtualinvoke child.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        goto label1;

     label4:
        return first;
    }

    protected final int getLineStart(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAst;
        java.lang.String line;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r0;
        java.lang.String[] $r1;
        int $i0, $i1, $i2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aAst := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck mIndentCheck>;

        $r1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: java.lang.String[] getLines()>();

        $i0 = virtualinvoke aAst.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i1 = $i0 - 1;

        line = $r1[$i1];

        $i2 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int getLineStart(java.lang.String)>(line);

        return $i2;
    }

    protected final void checkLinesIndent(int, int, com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        int aStartLine, aEndLine, i, $i0;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel aIndentLevel, offsetLevel, $r0;
        int[] $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aStartLine := @parameter0: int;

        aEndLine := @parameter1: int;

        aIndentLevel := @parameter2: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void checkSingleLine(int,com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel)>(aStartLine, aIndentLevel);

        $r0 = new com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        $r1 = newarray (int)[1];

        $i0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int getBasicOffset()>();

        $r1[0] = $i0;

        specialinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,int[])>(aIndentLevel, $r1);

        offsetLevel = $r0;

        i = aStartLine + 1;

     label1:
        if i > aEndLine goto label2;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void checkSingleLine(int,com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel)>(i, offsetLevel);

        i = i + 1;

        goto label1;

     label2:
        return;
    }

    protected boolean shouldIncreaseIndent()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        return 1;
    }

    private void checkLinesIndent(com.puppycrawl.tools.checkstyle.checks.indentation.LineSet, com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel, boolean, int)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.LineSet aLines;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel aIndentLevel, theLevel, $r3;
        boolean aFirstLineMatches, $z0, $z1;
        int aFirstLine, startLine, endLine, startCol, realStartCol, i, $i0, $i1, $i2, $i3;
        java.lang.Integer col, $r5;
        java.lang.String[] $r0;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r1;
        java.lang.String $r2;
        int[] $r4;
        com.puppycrawl.tools.checkstyle.api.DetailAST $r6;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aLines := @parameter0: com.puppycrawl.tools.checkstyle.checks.indentation.LineSet;

        aIndentLevel := @parameter1: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        aFirstLineMatches := @parameter2: boolean;

        aFirstLine := @parameter3: int;

        $z0 = virtualinvoke aLines.<com.puppycrawl.tools.checkstyle.checks.indentation.LineSet: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        startLine = virtualinvoke aLines.<com.puppycrawl.tools.checkstyle.checks.indentation.LineSet: int firstLine()>();

        endLine = virtualinvoke aLines.<com.puppycrawl.tools.checkstyle.checks.indentation.LineSet: int lastLine()>();

        startCol = virtualinvoke aLines.<com.puppycrawl.tools.checkstyle.checks.indentation.LineSet: int firstLineCol()>();

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck mIndentCheck>;

        $r0 = virtualinvoke $r1.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: java.lang.String[] getLines()>();

        $i0 = startLine - 1;

        $r2 = $r0[$i0];

        realStartCol = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int getLineStart(java.lang.String)>($r2);

        if realStartCol != startCol goto label2;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void checkSingleLine(int,int,com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,boolean)>(startLine, startCol, aIndentLevel, aFirstLineMatches);

     label2:
        theLevel = aIndentLevel;

        if aFirstLineMatches != 0 goto label3;

        $r6 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.api.DetailAST mMainAst>;

        $i3 = virtualinvoke $r6.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        if aFirstLine <= $i3 goto label4;

        $z1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: boolean shouldIncreaseIndent()>();

        if $z1 == 0 goto label4;

     label3:
        $r3 = new com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        $r4 = newarray (int)[1];

        $i1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int getBasicOffset()>();

        $r4[0] = $i1;

        specialinvoke $r3.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,int[])>(aIndentLevel, $r4);

        theLevel = $r3;

     label4:
        i = startLine + 1;

     label5:
        if i > endLine goto label7;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i);

        col = virtualinvoke aLines.<com.puppycrawl.tools.checkstyle.checks.indentation.LineSet: java.lang.Integer getStartColumn(java.lang.Integer)>($r5);

        if col == null goto label6;

        $i2 = virtualinvoke col.<java.lang.Integer: int intValue()>();

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void checkSingleLine(int,int,com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,boolean)>(i, $i2, theLevel, 0);

     label6:
        i = i + 1;

        goto label5;

     label7:
        return;
    }

    private void checkSingleLine(int, com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        int aLineNum, start, $i0;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel aIndentLevel;
        java.lang.String line;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r0;
        java.lang.String[] $r1;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aLineNum := @parameter0: int;

        aIndentLevel := @parameter1: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck mIndentCheck>;

        $r1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: java.lang.String[] getLines()>();

        $i0 = aLineNum - 1;

        line = $r1[$i0];

        start = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int getLineStart(java.lang.String)>(line);

        $z0 = virtualinvoke aIndentLevel.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: boolean gt(int)>(start);

        if $z0 == 0 goto label1;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void logChildError(int,int,com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel)>(aLineNum, start, aIndentLevel);

     label1:
        return;
    }

    private void checkSingleLine(int, int, com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel, boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        int aLineNum, aColNum, start, $i0;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel aIndentLevel;
        boolean aMustMatch, $z0, $z1;
        java.lang.String line;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r0;
        java.lang.String[] $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aLineNum := @parameter0: int;

        aColNum := @parameter1: int;

        aIndentLevel := @parameter2: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        aMustMatch := @parameter3: boolean;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck mIndentCheck>;

        $r1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: java.lang.String[] getLines()>();

        $i0 = aLineNum - 1;

        line = $r1[$i0];

        start = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int getLineStart(java.lang.String)>(line);

        if aMustMatch == 0 goto label1;

        $z1 = virtualinvoke aIndentLevel.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: boolean accept(int)>(start);

        if $z1 != 0 goto label3;

        goto label2;

     label1:
        if aColNum != start goto label3;

        $z0 = virtualinvoke aIndentLevel.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: boolean gt(int)>(start);

        if $z0 == 0 goto label3;

     label2:
        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void logChildError(int,int,com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel)>(aLineNum, start, aIndentLevel);

     label3:
        return;
    }

    protected final int getLineStart(java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        java.lang.String aLine;
        int start, $i0, $i1, $i2;
        char c;
        boolean $z0;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aLine := @parameter0: java.lang.String;

        start = 0;

     label1:
        $i0 = virtualinvoke aLine.<java.lang.String: int length()>();

        if start >= $i0 goto label3;

        c = virtualinvoke aLine.<java.lang.String: char charAt(int)>(start);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c);

        if $z0 != 0 goto label2;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck mIndentCheck>;

        $i1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: int getIndentationTabWidth()>();

        $i2 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: int lengthExpandedTabs(java.lang.String,int,int)>(aLine, start, $i1);

        return $i2;

     label2:
        start = start + 1;

        goto label1;

     label3:
        return 0;
    }

    protected final void checkChildren(com.puppycrawl.tools.checkstyle.api.DetailAST, int[], com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel, boolean, boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aParent, child;
        int[] aTokenTypes;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel aStartLevel;
        boolean aFirstLineMatches, aAllowNesting;
        int $i0, $i1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aParent := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        aTokenTypes := @parameter1: int[];

        aStartLevel := @parameter2: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        aFirstLineMatches := @parameter3: boolean;

        aAllowNesting := @parameter4: boolean;

        staticinvoke <java.util.Arrays: void sort(int[])>(aTokenTypes);

        child = virtualinvoke aParent.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

     label1:
        if child == null goto label3;

        $i0 = virtualinvoke child.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>(aTokenTypes, $i0);

        if $i1 < 0 goto label2;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void checkExpressionSubtree(com.puppycrawl.tools.checkstyle.api.DetailAST,com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,boolean,boolean)>(child, aStartLevel, aFirstLineMatches, aAllowNesting);

     label2:
        child = virtualinvoke child.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        goto label1;

     label3:
        return;
    }

    protected final void checkExpressionSubtree(com.puppycrawl.tools.checkstyle.api.DetailAST, com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel, boolean, boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aTree;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel aLevel;
        boolean aFirstLineMatches, aAllowNesting;
        com.puppycrawl.tools.checkstyle.checks.indentation.LineSet subtreeLines, $r0;
        int firstLine, $i0, $i1;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r1;
        java.lang.String[] $r2;
        java.lang.String $r3;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aTree := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        aLevel := @parameter1: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        aFirstLineMatches := @parameter2: boolean;

        aAllowNesting := @parameter3: boolean;

        $r0 = new com.puppycrawl.tools.checkstyle.checks.indentation.LineSet;

        specialinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.LineSet: void <init>()>();

        subtreeLines = $r0;

        firstLine = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int getFirstLine(int,com.puppycrawl.tools.checkstyle.api.DetailAST)>(2147483647, aTree);

        if aFirstLineMatches == 0 goto label1;

        if aAllowNesting != 0 goto label1;

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck mIndentCheck>;

        $r2 = virtualinvoke $r1.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: java.lang.String[] getLines()>();

        $i0 = firstLine - 1;

        $r3 = $r2[$i0];

        $i1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int getLineStart(java.lang.String)>($r3);

        virtualinvoke subtreeLines.<com.puppycrawl.tools.checkstyle.checks.indentation.LineSet: void addLineAndCol(int,int)>(firstLine, $i1);

     label1:
        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void findSubtreeLines(com.puppycrawl.tools.checkstyle.checks.indentation.LineSet,com.puppycrawl.tools.checkstyle.api.DetailAST,boolean)>(subtreeLines, aTree, aAllowNesting);

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void checkLinesIndent(com.puppycrawl.tools.checkstyle.checks.indentation.LineSet,com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,boolean,int)>(subtreeLines, aLevel, aFirstLineMatches, firstLine);

        return;
    }

    protected final int getFirstLine(int, com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        int aStartLine, realStart, currLine;
        com.puppycrawl.tools.checkstyle.api.DetailAST aTree, node;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aStartLine := @parameter0: int;

        aTree := @parameter1: com.puppycrawl.tools.checkstyle.api.DetailAST;

        realStart = aStartLine;

        currLine = virtualinvoke aTree.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        if currLine >= realStart goto label1;

        realStart = currLine;

     label1:
        node = virtualinvoke aTree.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

     label2:
        if node == null goto label3;

        realStart = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int getFirstLine(int,com.puppycrawl.tools.checkstyle.api.DetailAST)>(realStart, node);

        node = virtualinvoke node.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        goto label2;

     label3:
        return realStart;
    }

    protected final int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST;
        java.lang.String line;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r0, $r2;
        java.lang.String[] $r1;
        int $i0, $i1, $i2, $i3, $i4;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck mIndentCheck>;

        $r1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: java.lang.String[] getLines()>();

        $i0 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i1 = $i0 - 1;

        line = $r1[$i1];

        $i2 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getColumnNo()>();

        $r2 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck mIndentCheck>;

        $i3 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: int getIndentationTabWidth()>();

        $i4 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: int lengthExpandedTabs(java.lang.String,int,int)>(line, $i2, $i3);

        return $i4;
    }

    protected final void findSubtreeLines(com.puppycrawl.tools.checkstyle.checks.indentation.LineSet, com.puppycrawl.tools.checkstyle.api.DetailAST, boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.LineSet aLines;
        com.puppycrawl.tools.checkstyle.api.DetailAST aTree, node;
        boolean aAllowNesting, $z0;
        int lineNum, thisLineColumn, $i0, $i1, $i2;
        java.lang.Integer colNum, $r2;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r0;
        com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aLines := @parameter0: com.puppycrawl.tools.checkstyle.checks.indentation.LineSet;

        aTree := @parameter1: com.puppycrawl.tools.checkstyle.api.DetailAST;

        aAllowNesting := @parameter2: boolean;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck getIndentCheck()>();

        $r1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory getHandlerFactory()>();

        $i0 = virtualinvoke aTree.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        $z0 = virtualinvoke $r1.<com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory: boolean isHandledType(int)>($i0);

        if $z0 != 0 goto label1;

        $i1 = virtualinvoke aTree.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        if $i1 >= 0 goto label2;

     label1:
        return;

     label2:
        lineNum = virtualinvoke aTree.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(lineNum);

        colNum = virtualinvoke aLines.<com.puppycrawl.tools.checkstyle.checks.indentation.LineSet: java.lang.Integer getStartColumn(java.lang.Integer)>($r2);

        thisLineColumn = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aTree);

        if colNum == null goto label3;

        $i2 = virtualinvoke colNum.<java.lang.Integer: int intValue()>();

        if thisLineColumn >= $i2 goto label4;

     label3:
        virtualinvoke aLines.<com.puppycrawl.tools.checkstyle.checks.indentation.LineSet: void addLineAndCol(int,int)>(lineNum, thisLineColumn);

     label4:
        node = virtualinvoke aTree.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

     label5:
        if node == null goto label6;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void findSubtreeLines(com.puppycrawl.tools.checkstyle.checks.indentation.LineSet,com.puppycrawl.tools.checkstyle.api.DetailAST,boolean)>(aLines, node, aAllowNesting);

        node = virtualinvoke node.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        goto label5;

     label6:
        return;
    }

    protected void checkModifiers()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST modifiers, modifier, $r0;
        boolean $z0, $z1;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r1;
        int $i0, $i1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.api.DetailAST mMainAst>;

        modifiers = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(5);

        modifier = virtualinvoke modifiers.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

     label1:
        if modifier == null goto label3;

        $z0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: boolean startsLine(com.puppycrawl.tools.checkstyle.api.DetailAST)>(modifier);

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()>();

        $i0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)>(modifier);

        $z1 = virtualinvoke $r1.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: boolean accept(int)>($i0);

        if $z1 != 0 goto label2;

        $i1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)>(modifier);

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void logError(com.puppycrawl.tools.checkstyle.api.DetailAST,java.lang.String,int)>(modifier, "modifier", $i1);

     label2:
        modifier = virtualinvoke modifier.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        goto label1;

     label3:
        return;
    }

    public abstract void checkIndentation();

    protected final com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck getIndentCheck()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck mIndentCheck>;

        return $r0;
    }

    protected final com.puppycrawl.tools.checkstyle.api.DetailAST getMainAst()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.api.DetailAST mMainAst>;

        return $r0;
    }

    protected final com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler getParent()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this, $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler mParent>;

        return $r0;
    }

    protected final int getBasicOffset()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r0;
        int $i0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck getIndentCheck()>();

        $i0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: int getBasicOffset()>();

        return $i0;
    }

    protected final int getBraceAdjustement()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r0;
        int $i0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck getIndentCheck()>();

        $i0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: int getBraceAdjustement()>();

        return $i0;
    }

    protected final void checkRParen(com.puppycrawl.tools.checkstyle.api.DetailAST, com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aLparen, aRparen;
        int rparenLevel, lparenLevel, $i0;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r0;
        boolean $z0, $z1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aLparen := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        aRparen := @parameter1: com.puppycrawl.tools.checkstyle.api.DetailAST;

        if aRparen != null goto label1;

        return;

     label1:
        rparenLevel = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aRparen);

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()>();

        $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: boolean accept(int)>(rparenLevel);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: boolean startsLine(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aRparen);

        if $z1 != 0 goto label3;

     label2:
        return;

     label3:
        lparenLevel = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aLparen);

        $i0 = lparenLevel + 1;

        if rparenLevel != $i0 goto label4;

        return;

     label4:
        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void logError(com.puppycrawl.tools.checkstyle.api.DetailAST,java.lang.String,int)>(aRparen, "rparen", rparenLevel);

        return;
    }

    protected final void checkLParen(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aLparen;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r0;
        int $i0, $i1;
        boolean $z0, $z1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        aLparen := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        if aLparen == null goto label1;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()>();

        $i0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aLparen);

        $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: boolean accept(int)>($i0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: boolean startsLine(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aLparen);

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $i1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aLparen);

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void logError(com.puppycrawl.tools.checkstyle.api.DetailAST,java.lang.String,int)>(aLparen, "lparen", $i1);

        return;
    }
}
