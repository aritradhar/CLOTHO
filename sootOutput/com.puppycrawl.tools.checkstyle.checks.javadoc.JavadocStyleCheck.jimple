public class com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck extends com.puppycrawl.tools.checkstyle.api.Check
{
    private static final java.lang.String UNCLOSED_HTML;
    private static final java.lang.String EXTRA_HTML;
    private static final java.util.Set SINGLE_TAGS;
    private static final java.util.Set ALLOWED_TAGS;
    private com.puppycrawl.tools.checkstyle.api.Scope mScope;
    private com.puppycrawl.tools.checkstyle.api.Scope mExcludeScope;
    private java.lang.String mEndOfSentenceFormat;
    private java.util.regex.Pattern mEndOfSentencePattern;
    private boolean mCheckFirstSentence;
    private boolean mCheckHtml;
    private boolean mCheckEmptyJavadoc;

    public void <init>()
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        com.puppycrawl.tools.checkstyle.api.Scope $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.api.Check: void <init>()>();

        $r0 = <com.puppycrawl.tools.checkstyle.api.Scope: com.puppycrawl.tools.checkstyle.api.Scope PRIVATE>;

        this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: com.puppycrawl.tools.checkstyle.api.Scope mScope> = $r0;

        this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.lang.String mEndOfSentenceFormat> = "([.?!][ \t\n\r\f<])|([.?!]$)";

        this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: boolean mCheckFirstSentence> = 1;

        this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: boolean mCheckHtml> = 1;

        return;
    }

    public int[] getDefaultTokens()
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        int[] $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        $r0 = newarray (int)[10];

        $r0[0] = 15;

        $r0[1] = 14;

        $r0[2] = 161;

        $r0[3] = 158;

        $r0[4] = 9;

        $r0[5] = 8;

        $r0[6] = 10;

        $r0[7] = 159;

        $r0[8] = 165;

        $r0[9] = 16;

        return $r0;
    }

    public void visitToken(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST, $r0;
        com.puppycrawl.tools.checkstyle.api.FileContents contents;
        com.puppycrawl.tools.checkstyle.api.TextBlock cmt;
        boolean $z0;
        int $i0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        $z0 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: boolean shouldCheck(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        if $z0 == 0 goto label1;

        contents = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: com.puppycrawl.tools.checkstyle.api.FileContents getFileContents()>();

        $r0 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        $i0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        cmt = virtualinvoke contents.<com.puppycrawl.tools.checkstyle.api.FileContents: com.puppycrawl.tools.checkstyle.api.TextBlock getJavadocBefore(int)>($i0);

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: void checkComment(com.puppycrawl.tools.checkstyle.api.DetailAST,com.puppycrawl.tools.checkstyle.api.TextBlock)>(aAST, cmt);

     label1:
        return;
    }

    private boolean shouldCheck(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST, $r0;
        com.puppycrawl.tools.checkstyle.api.Scope declaredScope, scope, surroundingScope, $r1, $r2, $r3, $r4, $r5, $r7;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.puppycrawl.tools.checkstyle.api.FileContents $r6;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        $i0 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i0 != 16 goto label01;

        $r6 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: com.puppycrawl.tools.checkstyle.api.FileContents getFileContents()>();

        $z7 = virtualinvoke $r6.<com.puppycrawl.tools.checkstyle.api.FileContents: boolean inPackageInfo()>();

        return $z7;

     label01:
        $z0 = staticinvoke <com.puppycrawl.tools.checkstyle.api.ScopeUtils: boolean inCodeBlock(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        if $z0 == 0 goto label02;

        return 0;

     label02:
        $i1 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i1 != 159 goto label03;

        declaredScope = <com.puppycrawl.tools.checkstyle.api.Scope: com.puppycrawl.tools.checkstyle.api.Scope PUBLIC>;

        goto label04;

     label03:
        $r0 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(5);

        declaredScope = staticinvoke <com.puppycrawl.tools.checkstyle.api.ScopeUtils: com.puppycrawl.tools.checkstyle.api.Scope getScopeFromMods(com.puppycrawl.tools.checkstyle.api.DetailAST)>($r0);

     label04:
        $z1 = staticinvoke <com.puppycrawl.tools.checkstyle.api.ScopeUtils: boolean inInterfaceOrAnnotationBlock(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        if $z1 == 0 goto label05;

        $r7 = <com.puppycrawl.tools.checkstyle.api.Scope: com.puppycrawl.tools.checkstyle.api.Scope PUBLIC>;

        goto label06;

     label05:
        $r7 = declaredScope;

     label06:
        scope = $r7;

        surroundingScope = staticinvoke <com.puppycrawl.tools.checkstyle.api.ScopeUtils: com.puppycrawl.tools.checkstyle.api.Scope getSurroundingScope(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: com.puppycrawl.tools.checkstyle.api.Scope mScope>;

        $z2 = virtualinvoke scope.<com.puppycrawl.tools.checkstyle.api.Scope: boolean isIn(com.puppycrawl.tools.checkstyle.api.Scope)>($r1);

        if $z2 == 0 goto label09;

        if surroundingScope == null goto label07;

        $r5 = this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: com.puppycrawl.tools.checkstyle.api.Scope mScope>;

        $z6 = virtualinvoke surroundingScope.<com.puppycrawl.tools.checkstyle.api.Scope: boolean isIn(com.puppycrawl.tools.checkstyle.api.Scope)>($r5);

        if $z6 == 0 goto label09;

     label07:
        $r2 = this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: com.puppycrawl.tools.checkstyle.api.Scope mExcludeScope>;

        if $r2 == null goto label08;

        $r3 = this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: com.puppycrawl.tools.checkstyle.api.Scope mExcludeScope>;

        $z4 = virtualinvoke scope.<com.puppycrawl.tools.checkstyle.api.Scope: boolean isIn(com.puppycrawl.tools.checkstyle.api.Scope)>($r3);

        if $z4 == 0 goto label08;

        if surroundingScope == null goto label09;

        $r4 = this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: com.puppycrawl.tools.checkstyle.api.Scope mExcludeScope>;

        $z5 = virtualinvoke surroundingScope.<com.puppycrawl.tools.checkstyle.api.Scope: boolean isIn(com.puppycrawl.tools.checkstyle.api.Scope)>($r4);

        if $z5 != 0 goto label09;

     label08:
        $z3 = 1;

        goto label10;

     label09:
        $z3 = 0;

     label10:
        return $z3;
    }

    private void checkComment(com.puppycrawl.tools.checkstyle.api.DetailAST, com.puppycrawl.tools.checkstyle.api.TextBlock)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST;
        com.puppycrawl.tools.checkstyle.api.TextBlock aComment;
        boolean $z0, $z1, $z2, $z3;
        com.puppycrawl.tools.checkstyle.api.FileContents $r0;
        int $i0;
        java.lang.Object[] $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        aComment := @parameter1: com.puppycrawl.tools.checkstyle.api.TextBlock;

        if aComment != null goto label2;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: com.puppycrawl.tools.checkstyle.api.FileContents getFileContents()>();

        $z3 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.FileContents: boolean inPackageInfo()>();

        if $z3 == 0 goto label1;

        $i0 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $r1 = newarray (java.lang.Object)[0];

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: void log(int,java.lang.String,java.lang.Object[])>($i0, "javadoc.missing", $r1);

     label1:
        return;

     label2:
        $z0 = this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: boolean mCheckFirstSentence>;

        if $z0 == 0 goto label3;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: void checkFirstSentence(com.puppycrawl.tools.checkstyle.api.DetailAST,com.puppycrawl.tools.checkstyle.api.TextBlock)>(aAST, aComment);

     label3:
        $z1 = this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: boolean mCheckHtml>;

        if $z1 == 0 goto label4;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: void checkHtml(com.puppycrawl.tools.checkstyle.api.DetailAST,com.puppycrawl.tools.checkstyle.api.TextBlock)>(aAST, aComment);

     label4:
        $z2 = this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: boolean mCheckEmptyJavadoc>;

        if $z2 == 0 goto label5;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: void checkEmptyJavadoc(com.puppycrawl.tools.checkstyle.api.TextBlock)>(aComment);

     label5:
        return;
    }

    private void checkFirstSentence(com.puppycrawl.tools.checkstyle.api.DetailAST, com.puppycrawl.tools.checkstyle.api.TextBlock)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST;
        com.puppycrawl.tools.checkstyle.api.TextBlock aComment;
        java.lang.String commentText, $r3;
        java.lang.String[] $r0;
        int $i0, $i1;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r4;
        com.puppycrawl.tools.checkstyle.api.JavadocTagInfo $r5;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        aComment := @parameter1: com.puppycrawl.tools.checkstyle.api.TextBlock;

        $r0 = interfaceinvoke aComment.<com.puppycrawl.tools.checkstyle.api.TextBlock: java.lang.String[] getText()>();

        commentText = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.lang.String getCommentText(java.lang.String[])>($r0);

        $i0 = virtualinvoke commentText.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        $r1 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.util.regex.Pattern getEndOfSentencePattern()>();

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(commentText);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label2;

        $r3 = "{@inheritDoc}";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(commentText);

        if $z1 == 0 goto label1;

        $r5 = <com.puppycrawl.tools.checkstyle.api.JavadocTagInfo: com.puppycrawl.tools.checkstyle.api.JavadocTagInfo INHERIT_DOC>;

        $z2 = virtualinvoke $r5.<com.puppycrawl.tools.checkstyle.api.JavadocTagInfo: boolean isValidOn(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        if $z2 != 0 goto label2;

     label1:
        $i1 = interfaceinvoke aComment.<com.puppycrawl.tools.checkstyle.api.TextBlock: int getStartLineNo()>();

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: void log(int,java.lang.String,java.lang.Object[])>($i1, "javadoc.noperiod", $r4);

     label2:
        return;
    }

    private void checkEmptyJavadoc(com.puppycrawl.tools.checkstyle.api.TextBlock)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        com.puppycrawl.tools.checkstyle.api.TextBlock aComment;
        java.lang.String commentText;
        java.lang.String[] $r0;
        int $i0, $i1;
        java.lang.Object[] $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aComment := @parameter0: com.puppycrawl.tools.checkstyle.api.TextBlock;

        $r0 = interfaceinvoke aComment.<com.puppycrawl.tools.checkstyle.api.TextBlock: java.lang.String[] getText()>();

        commentText = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.lang.String getCommentText(java.lang.String[])>($r0);

        $i0 = virtualinvoke commentText.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $i1 = interfaceinvoke aComment.<com.puppycrawl.tools.checkstyle.api.TextBlock: int getStartLineNo()>();

        $r1 = newarray (java.lang.Object)[0];

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: void log(int,java.lang.String,java.lang.Object[])>($i1, "javadoc.empty", $r1);

     label1:
        return;
    }

    private java.lang.String getCommentText(java.lang.String[])
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        java.lang.String[] aComments, arr$;
        java.lang.StringBuffer buffer, $r0;
        int len$, i$, textStart;
        java.lang.String line, $r1, $r2, $r3;
        char $c0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aComments := @parameter0: java.lang.String[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        buffer = $r0;

        arr$ = aComments;

        len$ = lengthof arr$;

        i$ = 0;

     label1:
        if i$ >= len$ goto label4;

        line = arr$[i$];

        textStart = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: int findTextStart(java.lang.String)>(line);

        if textStart == -1 goto label3;

        $c0 = virtualinvoke line.<java.lang.String: char charAt(int)>(textStart);

        if $c0 != 64 goto label2;

        goto label4;

     label2:
        $r3 = virtualinvoke line.<java.lang.String: java.lang.String substring(int)>(textStart);

        virtualinvoke buffer.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: void trimTail(java.lang.StringBuffer)>(buffer);

        virtualinvoke buffer.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label3:
        i$ = i$ + 1;

        goto label1;

     label4:
        $r1 = virtualinvoke buffer.<java.lang.StringBuffer: java.lang.String toString()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        return $r2;
    }

    private int findTextStart(java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        java.lang.String aLine, $r0;
        int textStart, i, $i0, $i2;
        char $c1, $c3;
        boolean $z0, $z1, $z2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aLine := @parameter0: java.lang.String;

        textStart = -1;

        i = 0;

     label1:
        $i0 = virtualinvoke aLine.<java.lang.String: int length()>();

        if i >= $i0 goto label5;

        $c1 = virtualinvoke aLine.<java.lang.String: char charAt(int)>(i);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z0 != 0 goto label4;

        $r0 = "/**";

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        $z1 = virtualinvoke aLine.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(i, "/**", 0, $i2);

        if $z1 == 0 goto label2;

        i = i + 2;

        goto label4;

     label2:
        $z2 = virtualinvoke aLine.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(i, "*/", 0, 2);

        if $z2 == 0 goto label3;

        i = i + 1;

        goto label4;

     label3:
        $c3 = virtualinvoke aLine.<java.lang.String: char charAt(int)>(i);

        if $c3 == 42 goto label4;

        textStart = i;

        goto label5;

     label4:
        i = i + 1;

        goto label1;

     label5:
        return textStart;
    }

    private void trimTail(java.lang.StringBuffer)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        java.lang.StringBuffer aBuffer;
        int i, $i0, $i2, $i5, $i6, $i8;
        char $c1, $c3, $c4, $c7;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aBuffer := @parameter0: java.lang.StringBuffer;

        $i0 = virtualinvoke aBuffer.<java.lang.StringBuffer: int length()>();

        i = $i0 - 1;

     label1:
        if i < 0 goto label5;

        $c1 = virtualinvoke aBuffer.<java.lang.StringBuffer: char charAt(int)>(i);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z0 == 0 goto label2;

        virtualinvoke aBuffer.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>(i);

        goto label4;

     label2:
        if i <= 0 goto label5;

        $i2 = i - 1;

        $c3 = virtualinvoke aBuffer.<java.lang.StringBuffer: char charAt(int)>($i2);

        if $c3 != 42 goto label5;

        $c4 = virtualinvoke aBuffer.<java.lang.StringBuffer: char charAt(int)>(i);

        if $c4 != 47 goto label5;

        virtualinvoke aBuffer.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>(i);

        $i5 = i - 1;

        virtualinvoke aBuffer.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>($i5);

        i = i + -1;

     label3:
        $i6 = i - 1;

        $c7 = virtualinvoke aBuffer.<java.lang.StringBuffer: char charAt(int)>($i6);

        if $c7 != 42 goto label4;

        $i8 = i - 1;

        virtualinvoke aBuffer.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>($i8);

        i = i + -1;

        goto label3;

     label4:
        i = i + -1;

        goto label1;

     label5:
        return;
    }

    private void checkHtml(com.puppycrawl.tools.checkstyle.api.DetailAST, com.puppycrawl.tools.checkstyle.api.TextBlock)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST;
        com.puppycrawl.tools.checkstyle.api.TextBlock aComment;
        int lineno, $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        com.puppycrawl.tools.checkstyle.api.FastStack htmlStack;
        java.lang.String[] text;
        java.util.List typeParameters;
        com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag tag, htag;
        java.util.Iterator i$;
        com.puppycrawl.tools.checkstyle.checks.javadoc.TagParser $r0, parser;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Object $r1;
        java.lang.String $r2, $r3, $r5, $r6, $r9, tag;
        java.lang.Object[] $r4, $r7, $r8;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        aComment := @parameter1: com.puppycrawl.tools.checkstyle.api.TextBlock;

        lineno = interfaceinvoke aComment.<com.puppycrawl.tools.checkstyle.api.TextBlock: int getStartLineNo()>();

        htmlStack = staticinvoke <com.puppycrawl.tools.checkstyle.api.FastStack: com.puppycrawl.tools.checkstyle.api.FastStack newInstance()>();

        text = interfaceinvoke aComment.<com.puppycrawl.tools.checkstyle.api.TextBlock: java.lang.String[] getText()>();

        typeParameters = staticinvoke <com.puppycrawl.tools.checkstyle.checks.CheckUtils: java.util.List getTypeParameterNames(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        $r0 = new com.puppycrawl.tools.checkstyle.checks.javadoc.TagParser;

        specialinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.javadoc.TagParser: void <init>(java.lang.String[],int)>(text, lineno);

        parser = $r0;

     label01:
        $z0 = virtualinvoke parser.<com.puppycrawl.tools.checkstyle.checks.javadoc.TagParser: boolean hasNextTag()>();

        if $z0 == 0 goto label07;

        tag = virtualinvoke parser.<com.puppycrawl.tools.checkstyle.checks.javadoc.TagParser: com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag nextTag()>();

        $z6 = virtualinvoke tag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: boolean isIncompleteTag()>();

        if $z6 == 0 goto label02;

        $i4 = virtualinvoke tag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: int getLineno()>();

        $r8 = newarray (java.lang.Object)[1];

        $i5 = virtualinvoke tag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: int getLineno()>();

        $i6 = $i5 - lineno;

        $r9 = text[$i6];

        $r8[0] = $r9;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: void log(int,java.lang.String,java.lang.Object[])>($i4, "javadoc.incompleteTag", $r8);

        return;

     label02:
        $z5 = virtualinvoke tag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: boolean isClosedTag()>();

        if $z5 == 0 goto label03;

        goto label01;

     label03:
        $z8 = virtualinvoke tag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: boolean isCloseTag()>();

        if $z8 != 0 goto label04;

        $z9 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: boolean isAllowedTag(com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag)>(tag);

        if $z9 == 0 goto label06;

        virtualinvoke htmlStack.<com.puppycrawl.tools.checkstyle.api.FastStack: void push(java.lang.Object)>(tag);

        goto label06;

     label04:
        $r6 = virtualinvoke tag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: java.lang.String getId()>();

        $z7 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: boolean isExtraHtml(java.lang.String,com.puppycrawl.tools.checkstyle.api.FastStack)>($r6, htmlStack);

        if $z7 == 0 goto label05;

        $i2 = virtualinvoke tag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: int getLineno()>();

        $i3 = virtualinvoke tag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: int getPosition()>();

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = tag;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: void log(int,int,java.lang.String,java.lang.Object[])>($i2, $i3, "javadoc.extrahtml", $r7);

        goto label06;

     label05:
        $r5 = virtualinvoke tag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: java.lang.String getId()>();

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: void checkUnclosedTags(com.puppycrawl.tools.checkstyle.api.FastStack,java.lang.String)>(htmlStack, $r5);

     label06:
        goto label01;

     label07:
        tag = "";

        i$ = virtualinvoke htmlStack.<com.puppycrawl.tools.checkstyle.api.FastStack: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r1 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        htag = (com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag) $r1;

        $z2 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: boolean isSingleTag(com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag)>(htag);

        if $z2 != 0 goto label09;

        $r2 = virtualinvoke htag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: java.lang.String getId()>();

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(tag);

        if $z3 != 0 goto label09;

        $r3 = virtualinvoke htag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: java.lang.String getId()>();

        $z4 = interfaceinvoke typeParameters.<java.util.List: boolean contains(java.lang.Object)>($r3);

        if $z4 != 0 goto label09;

        $i0 = virtualinvoke htag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: int getLineno()>();

        $i1 = virtualinvoke htag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: int getPosition()>();

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = htag;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: void log(int,int,java.lang.String,java.lang.Object[])>($i0, $i1, "javadoc.unclosedhtml", $r4);

        tag = virtualinvoke htag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: java.lang.String getId()>();

     label09:
        goto label08;

     label10:
        return;
    }

    private void checkUnclosedTags(com.puppycrawl.tools.checkstyle.api.FastStack, java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        com.puppycrawl.tools.checkstyle.api.FastStack aHtmlStack, unclosedTags;
        java.lang.String aToken, lastFound, $r1, $r3;
        com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag lastOpenTag, htag;
        java.util.Iterator i$;
        java.lang.Object $r0, $r2, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1;
        java.lang.Object[] $r4;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aHtmlStack := @parameter0: com.puppycrawl.tools.checkstyle.api.FastStack;

        aToken := @parameter1: java.lang.String;

        unclosedTags = staticinvoke <com.puppycrawl.tools.checkstyle.api.FastStack: com.puppycrawl.tools.checkstyle.api.FastStack newInstance()>();

        $r0 = virtualinvoke aHtmlStack.<com.puppycrawl.tools.checkstyle.api.FastStack: java.lang.Object pop()>();

        lastOpenTag = (com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag) $r0;

     label1:
        $r1 = virtualinvoke lastOpenTag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: java.lang.String getId()>();

        $z0 = virtualinvoke aToken.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label3;

        $z3 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: boolean isSingleTag(com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag)>(lastOpenTag);

        if $z3 == 0 goto label2;

        $r5 = virtualinvoke aHtmlStack.<com.puppycrawl.tools.checkstyle.api.FastStack: java.lang.Object pop()>();

        lastOpenTag = (com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag) $r5;

        goto label1;

     label2:
        virtualinvoke unclosedTags.<com.puppycrawl.tools.checkstyle.api.FastStack: void push(java.lang.Object)>(lastOpenTag);

        $r6 = virtualinvoke aHtmlStack.<com.puppycrawl.tools.checkstyle.api.FastStack: java.lang.Object pop()>();

        lastOpenTag = (com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag) $r6;

        goto label1;

     label3:
        lastFound = "";

        i$ = virtualinvoke unclosedTags.<com.puppycrawl.tools.checkstyle.api.FastStack: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r2 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        htag = (com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag) $r2;

        lastOpenTag = htag;

        $r3 = virtualinvoke lastOpenTag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: java.lang.String getId()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(lastFound);

        if $z2 == 0 goto label5;

        goto label4;

     label5:
        lastFound = virtualinvoke lastOpenTag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: java.lang.String getId()>();

        $i1 = virtualinvoke lastOpenTag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: int getLineno()>();

        $i0 = virtualinvoke lastOpenTag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: int getPosition()>();

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = lastOpenTag;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: void log(int,int,java.lang.String,java.lang.Object[])>($i1, $i0, "javadoc.unclosedhtml", $r4);

        goto label4;

     label6:
        return;
    }

    private boolean isSingleTag(com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag aTag;
        java.util.Set $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aTag := @parameter0: com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag;

        $r0 = <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.util.Set SINGLE_TAGS>;

        $r1 = virtualinvoke aTag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: java.lang.String getId()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    private boolean isAllowedTag(com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag aTag;
        java.util.Set $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aTag := @parameter0: com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag;

        $r0 = <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.util.Set ALLOWED_TAGS>;

        $r1 = virtualinvoke aTag.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: java.lang.String getId()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    private boolean isExtraHtml(java.lang.String, com.puppycrawl.tools.checkstyle.api.FastStack)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        java.lang.String aToken, $r1;
        com.puppycrawl.tools.checkstyle.api.FastStack aHtmlStack;
        boolean isExtra, $z0, $z1;
        java.util.Iterator i$;
        com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag td;
        java.lang.Object $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aToken := @parameter0: java.lang.String;

        aHtmlStack := @parameter1: com.puppycrawl.tools.checkstyle.api.FastStack;

        isExtra = 1;

        i$ = virtualinvoke aHtmlStack.<com.puppycrawl.tools.checkstyle.api.FastStack: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r0 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        td = (com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag) $r0;

        $r1 = virtualinvoke td.<com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag: java.lang.String getId()>();

        $z1 = virtualinvoke aToken.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z1 == 0 goto label2;

        isExtra = 0;

        goto label3;

     label2:
        goto label1;

     label3:
        return isExtra;
    }

    public void setScope(java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        java.lang.String aFrom;
        com.puppycrawl.tools.checkstyle.api.Scope $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aFrom := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Scope: com.puppycrawl.tools.checkstyle.api.Scope getInstance(java.lang.String)>(aFrom);

        this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: com.puppycrawl.tools.checkstyle.api.Scope mScope> = $r0;

        return;
    }

    public void setExcludeScope(java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        java.lang.String aScope;
        com.puppycrawl.tools.checkstyle.api.Scope $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aScope := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Scope: com.puppycrawl.tools.checkstyle.api.Scope getInstance(java.lang.String)>(aScope);

        this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: com.puppycrawl.tools.checkstyle.api.Scope mExcludeScope> = $r0;

        return;
    }

    public void setEndOfSentenceFormat(java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        java.lang.String aFormat;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aFormat := @parameter0: java.lang.String;

        this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.lang.String mEndOfSentenceFormat> = aFormat;

        return;
    }

    private java.util.regex.Pattern getEndOfSentencePattern()
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        java.util.regex.Pattern $r0, $r1, $r3;
        java.lang.String $r2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.util.regex.Pattern mEndOfSentencePattern>;

        if $r0 != null goto label1;

        $r2 = this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.lang.String mEndOfSentenceFormat>;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r2);

        this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.util.regex.Pattern mEndOfSentencePattern> = $r3;

     label1:
        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.util.regex.Pattern mEndOfSentencePattern>;

        return $r1;
    }

    public void setCheckFirstSentence(boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        boolean aFlag;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aFlag := @parameter0: boolean;

        this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: boolean mCheckFirstSentence> = aFlag;

        return;
    }

    public void setCheckHtml(boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        boolean aFlag;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aFlag := @parameter0: boolean;

        this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: boolean mCheckHtml> = aFlag;

        return;
    }

    public void setCheckEmptyJavadoc(boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck this;
        boolean aFlag;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;

        aFlag := @parameter0: boolean;

        this.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: boolean mCheckEmptyJavadoc> = aFlag;

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r2;
        com.google.common.collect.ImmutableSortedSet $r1, $r3;

        <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.lang.String EXTRA_HTML> = "javadoc.extrahtml";

        <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.lang.String UNCLOSED_HTML> = "javadoc.unclosedhtml";

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "p";

        $r0[1] = "td";

        $r0[2] = "tr";

        $r0[3] = "th";

        $r1 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[])>("br", "li", "dt", "dd", "hr", "img", $r0);

        <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.util.Set SINGLE_TAGS> = $r1;

        $r2 = newarray (java.lang.String)[50];

        $r2[0] = "bdo";

        $r2[1] = "big";

        $r2[2] = "blockquote";

        $r2[3] = "br";

        $r2[4] = "caption";

        $r2[5] = "cite";

        $r2[6] = "code";

        $r2[7] = "colgroup";

        $r2[8] = "dd";

        $r2[9] = "del";

        $r2[10] = "div";

        $r2[11] = "dfn";

        $r2[12] = "dl";

        $r2[13] = "dt";

        $r2[14] = "em";

        $r2[15] = "fieldset";

        $r2[16] = "font";

        $r2[17] = "h1";

        $r2[18] = "h2";

        $r2[19] = "h3";

        $r2[20] = "h4";

        $r2[21] = "h5";

        $r2[22] = "h6";

        $r2[23] = "hr";

        $r2[24] = "i";

        $r2[25] = "img";

        $r2[26] = "ins";

        $r2[27] = "kbd";

        $r2[28] = "li";

        $r2[29] = "ol";

        $r2[30] = "p";

        $r2[31] = "pre";

        $r2[32] = "q";

        $r2[33] = "samp";

        $r2[34] = "small";

        $r2[35] = "span";

        $r2[36] = "strong";

        $r2[37] = "style";

        $r2[38] = "sub";

        $r2[39] = "sup";

        $r2[40] = "table";

        $r2[41] = "tbody";

        $r2[42] = "td";

        $r2[43] = "tfoot";

        $r2[44] = "th";

        $r2[45] = "thead";

        $r2[46] = "tr";

        $r2[47] = "tt";

        $r2[48] = "u";

        $r2[49] = "ul";

        $r3 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[])>("a", "abbr", "acronym", "address", "area", "b", $r2);

        <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck: java.util.Set ALLOWED_TAGS> = $r3;

        return;
    }
}
