public final class com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils extends java.lang.Object
{
    private static final com.google.common.collect.ImmutableMap TOKEN_NAME_TO_VALUE;
    private static final java.lang.String[] TOKEN_VALUE_TO_NAME;

    private void <init>()
    {
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils this;

        this := @this: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTags getJavadocTags(com.puppycrawl.tools.checkstyle.api.TextBlock, com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType)
    {
        com.puppycrawl.tools.checkstyle.api.TextBlock aCmt;
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType aTagType, $r1, $r2, $r6, $r10;
        java.lang.String[] text;
        java.util.ArrayList tags, invalidTags;
        java.util.regex.Pattern blockTagPattern, tagPattern, tagName;
        int i, line, col, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, col;
        java.lang.String s, tagName, content, tagValue, $r3, $r9, line;
        java.util.regex.Matcher blockTagMatcher, tagMatcher, content;
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTags $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z8, $z9, $z11, $z13;
        com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTag $r4, $r8;
        com.puppycrawl.tools.checkstyle.checks.javadoc.InvalidJavadocTag $r5, $r7;

        aCmt := @parameter0: com.puppycrawl.tools.checkstyle.api.TextBlock;

        aTagType := @parameter1: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType;

        text = interfaceinvoke aCmt.<com.puppycrawl.tools.checkstyle.api.TextBlock: java.lang.String[] getText()>();

        tags = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        invalidTags = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        blockTagPattern = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: java.util.regex.Pattern getPattern(java.lang.String)>("/\\*{2,}\\s*@(\\p{Alpha}+)\\s");

        i = 0;

     label01:
        $i0 = lengthof text;

        if i >= $i0 goto label16;

        s = text[i];

        blockTagMatcher = virtualinvoke blockTagPattern.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(s);

        $r1 = <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType ALL>;

        $z0 = virtualinvoke aTagType.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label02;

        $r10 = <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType BLOCK>;

        $z13 = virtualinvoke aTagType.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType: boolean equals(java.lang.Object)>($r10);

        if $z13 == 0 goto label07;

     label02:
        $z1 = virtualinvoke blockTagMatcher.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label07;

        tagName = virtualinvoke blockTagMatcher.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i8 = virtualinvoke blockTagMatcher.<java.util.regex.Matcher: int end(int)>(1);

        content = virtualinvoke s.<java.lang.String: java.lang.String substring(int)>($i8);

        $z9 = virtualinvoke content.<java.lang.String: boolean endsWith(java.lang.String)>("*/");

        if $z9 == 0 goto label03;

        $i10 = virtualinvoke content.<java.lang.String: int length()>();

        $i11 = $i10 - 2;

        content = virtualinvoke content.<java.lang.String: java.lang.String substring(int,int)>(0, $i11);

     label03:
        $i7 = interfaceinvoke aCmt.<com.puppycrawl.tools.checkstyle.api.TextBlock: int getStartLineNo()>();

        line = $i7 + i;

        $i9 = virtualinvoke blockTagMatcher.<java.util.regex.Matcher: int start(int)>(1);

        col = $i9 - 1;

        if i != 0 goto label04;

        $i12 = interfaceinvoke aCmt.<com.puppycrawl.tools.checkstyle.api.TextBlock: int getStartColNo()>();

        col = col + $i12;

     label04:
        $z11 = staticinvoke <com.puppycrawl.tools.checkstyle.api.JavadocTagInfo: boolean isValidName(java.lang.String)>(tagName);

        if $z11 == 0 goto label05;

        $r8 = new com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTag;

        $r9 = virtualinvoke content.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r8.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTag: void <init>(int,int,java.lang.String,java.lang.String)>(line, col, tagName, $r9);

        interfaceinvoke tags.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label06;

     label05:
        $r7 = new com.puppycrawl.tools.checkstyle.checks.javadoc.InvalidJavadocTag;

        specialinvoke $r7.<com.puppycrawl.tools.checkstyle.checks.javadoc.InvalidJavadocTag: void <init>(int,int,java.lang.String)>(line, col, tagName);

        interfaceinvoke invalidTags.<java.util.List: boolean add(java.lang.Object)>($r7);

     label06:
        goto label15;

     label07:
        $r2 = <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType ALL>;

        $z2 = virtualinvoke aTagType.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType: boolean equals(java.lang.Object)>($r2);

        if $z2 != 0 goto label08;

        $r6 = <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType INLINE>;

        $z8 = virtualinvoke aTagType.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils$JavadocTagType: boolean equals(java.lang.Object)>($r6);

        if $z8 == 0 goto label15;

     label08:
        tagName = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: java.util.regex.Pattern getPattern(java.lang.String)>("^\\s*(?:/\\*{2,}|\\*+)\\s*(.*)");

        content = virtualinvoke tagName.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(s);

        $z3 = virtualinvoke content.<java.util.regex.Matcher: boolean find()>();

        if $z3 != 0 goto label09;

        line = s;

        col = 0;

        goto label10;

     label09:
        line = virtualinvoke content.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i1 = virtualinvoke content.<java.util.regex.Matcher: int start(int)>(1);

        col = $i1 - 1;

     label10:
        tagPattern = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: java.util.regex.Pattern getPattern(java.lang.String)>(".*?\\{@(\\p{Alpha}+)\\s+(.*?)\\}");

        tagMatcher = virtualinvoke tagPattern.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(line);

     label11:
        $z4 = virtualinvoke tagMatcher.<java.util.regex.Matcher: boolean find()>();

        if $z4 == 0 goto label15;

        $i2 = virtualinvoke tagMatcher.<java.util.regex.Matcher: int groupCount()>();

        if $i2 != 2 goto label11;

        tagName = virtualinvoke tagMatcher.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r3 = virtualinvoke tagMatcher.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        tagValue = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $i4 = interfaceinvoke aCmt.<com.puppycrawl.tools.checkstyle.api.TextBlock: int getStartLineNo()>();

        line = $i4 + i;

        $i5 = virtualinvoke tagMatcher.<java.util.regex.Matcher: int start(int)>(1);

        $i3 = $i5 - 1;

        col = col + $i3;

        if i != 0 goto label12;

        $i6 = interfaceinvoke aCmt.<com.puppycrawl.tools.checkstyle.api.TextBlock: int getStartColNo()>();

        col = col + $i6;

     label12:
        $z5 = staticinvoke <com.puppycrawl.tools.checkstyle.api.JavadocTagInfo: boolean isValidName(java.lang.String)>(tagName);

        if $z5 == 0 goto label13;

        $r4 = new com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTag;

        specialinvoke $r4.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTag: void <init>(int,int,java.lang.String,java.lang.String)>(line, col, tagName, tagValue);

        interfaceinvoke tags.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label14;

     label13:
        $r5 = new com.puppycrawl.tools.checkstyle.checks.javadoc.InvalidJavadocTag;

        specialinvoke $r5.<com.puppycrawl.tools.checkstyle.checks.javadoc.InvalidJavadocTag: void <init>(int,int,java.lang.String)>(line, col, tagName);

        interfaceinvoke invalidTags.<java.util.List: boolean add(java.lang.Object)>($r5);

     label14:
        goto label11;

     label15:
        blockTagPattern = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: java.util.regex.Pattern getPattern(java.lang.String)>("^\\s*\\**\\s*@(\\p{Alpha}+)\\s");

        i = i + 1;

        goto label01;

     label16:
        $r0 = new com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTags;

        specialinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTags: void <init>(java.util.List,java.util.List)>(tags, invalidTags);

        return $r0;
    }

    public static boolean isJavadocComment(java.lang.String)
    {
        java.lang.String aCommentContent;
        boolean result, $z0, $z1;
        char docCommentIdentificator;

        aCommentContent := @parameter0: java.lang.String;

        result = 0;

        $z0 = virtualinvoke aCommentContent.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        docCommentIdentificator = virtualinvoke aCommentContent.<java.lang.String: char charAt(int)>(0);

        if docCommentIdentificator != 42 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        result = $z1;

     label3:
        return result;
    }

    public static boolean isJavadocComment(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.api.DetailAST aBlockCommentBegin;
        char docCommentIdentificator;
        java.lang.String $r0;
        boolean $z0;

        aBlockCommentBegin := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        $r0 = staticinvoke <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils: java.lang.String getBlockCommentContent(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aBlockCommentBegin);

        docCommentIdentificator = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if docCommentIdentificator != 42 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.String getBlockCommentContent(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.api.DetailAST aBlockCommentBegin, commentContent;
        java.lang.String $r0;

        aBlockCommentBegin := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        commentContent = virtualinvoke aBlockCommentBegin.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        $r0 = virtualinvoke commentContent.<com.puppycrawl.tools.checkstyle.api.DetailAST: java.lang.String getText()>();

        return $r0;
    }

    public static com.puppycrawl.tools.checkstyle.api.DetailNode findFirstToken(com.puppycrawl.tools.checkstyle.api.DetailNode, int)
    {
        com.puppycrawl.tools.checkstyle.api.DetailNode aNode, retVal, i;
        int aType, $i0;

        aNode := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailNode;

        aType := @parameter1: int;

        retVal = null;

        i = staticinvoke <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils: com.puppycrawl.tools.checkstyle.api.DetailNode getFirstChild(com.puppycrawl.tools.checkstyle.api.DetailNode)>(aNode);

     label1:
        if i == null goto label3;

        $i0 = interfaceinvoke i.<com.puppycrawl.tools.checkstyle.api.DetailNode: int getType()>();

        if $i0 != aType goto label2;

        retVal = i;

        goto label3;

     label2:
        i = staticinvoke <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils: com.puppycrawl.tools.checkstyle.api.DetailNode getNextSibling(com.puppycrawl.tools.checkstyle.api.DetailNode)>(i);

        goto label1;

     label3:
        return retVal;
    }

    public static com.puppycrawl.tools.checkstyle.api.DetailNode getFirstChild(com.puppycrawl.tools.checkstyle.api.DetailNode)
    {
        com.puppycrawl.tools.checkstyle.api.DetailNode aNode, $r2;
        com.puppycrawl.tools.checkstyle.api.DetailNode[] $r0, $r1;
        int $i0;

        aNode := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailNode;

        $r0 = interfaceinvoke aNode.<com.puppycrawl.tools.checkstyle.api.DetailNode: com.puppycrawl.tools.checkstyle.api.DetailNode[] getChildren()>();

        $i0 = lengthof $r0;

        if $i0 <= 0 goto label1;

        $r1 = interfaceinvoke aNode.<com.puppycrawl.tools.checkstyle.api.DetailNode: com.puppycrawl.tools.checkstyle.api.DetailNode[] getChildren()>();

        $r2 = $r1[0];

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public static boolean branchContains(com.puppycrawl.tools.checkstyle.api.DetailNode, int)
    {
        com.puppycrawl.tools.checkstyle.api.DetailNode aNode, curNode, toVisit;
        int aType, $i0;

        aNode := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailNode;

        aType := @parameter1: int;

        curNode = aNode;

     label1:
        if curNode == null goto label6;

        $i0 = interfaceinvoke curNode.<com.puppycrawl.tools.checkstyle.api.DetailNode: int getType()>();

        if aType != $i0 goto label2;

        return 1;

     label2:
        toVisit = staticinvoke <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils: com.puppycrawl.tools.checkstyle.api.DetailNode getFirstChild(com.puppycrawl.tools.checkstyle.api.DetailNode)>(curNode);

     label3:
        if curNode == null goto label4;

        if toVisit != null goto label4;

        toVisit = staticinvoke <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils: com.puppycrawl.tools.checkstyle.api.DetailNode getNextSibling(com.puppycrawl.tools.checkstyle.api.DetailNode)>(curNode);

        if toVisit != null goto label3;

        curNode = interfaceinvoke curNode.<com.puppycrawl.tools.checkstyle.api.DetailNode: com.puppycrawl.tools.checkstyle.api.DetailNode getParent()>();

        goto label3;

     label4:
        if curNode != toVisit goto label5;

        goto label6;

     label5:
        curNode = toVisit;

        goto label1;

     label6:
        return 0;
    }

    public static com.puppycrawl.tools.checkstyle.api.DetailNode getNextSibling(com.puppycrawl.tools.checkstyle.api.DetailNode)
    {
        com.puppycrawl.tools.checkstyle.api.DetailNode aNode, parent, $r0;
        int nextSiblingIndex, $i0, $i1, $i2;
        com.puppycrawl.tools.checkstyle.api.DetailNode[] children;

        aNode := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailNode;

        parent = interfaceinvoke aNode.<com.puppycrawl.tools.checkstyle.api.DetailNode: com.puppycrawl.tools.checkstyle.api.DetailNode getParent()>();

        if parent == null goto label1;

        $i0 = interfaceinvoke aNode.<com.puppycrawl.tools.checkstyle.api.DetailNode: int getIndex()>();

        nextSiblingIndex = $i0 + 1;

        children = interfaceinvoke parent.<com.puppycrawl.tools.checkstyle.api.DetailNode: com.puppycrawl.tools.checkstyle.api.DetailNode[] getChildren()>();

        $i1 = lengthof children;

        $i2 = $i1 - 1;

        if nextSiblingIndex > $i2 goto label1;

        $r0 = children[nextSiblingIndex];

        return $r0;

     label1:
        return null;
    }

    public static com.puppycrawl.tools.checkstyle.api.DetailNode getPreviousSibling(com.puppycrawl.tools.checkstyle.api.DetailNode)
    {
        com.puppycrawl.tools.checkstyle.api.DetailNode aNode, parent, $r0;
        int previousSiblingIndex, $i0;
        com.puppycrawl.tools.checkstyle.api.DetailNode[] children;

        aNode := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailNode;

        parent = interfaceinvoke aNode.<com.puppycrawl.tools.checkstyle.api.DetailNode: com.puppycrawl.tools.checkstyle.api.DetailNode getParent()>();

        if parent == null goto label1;

        $i0 = interfaceinvoke aNode.<com.puppycrawl.tools.checkstyle.api.DetailNode: int getIndex()>();

        previousSiblingIndex = $i0 - 1;

        children = interfaceinvoke parent.<com.puppycrawl.tools.checkstyle.api.DetailNode: com.puppycrawl.tools.checkstyle.api.DetailNode[] getChildren()>();

        if previousSiblingIndex < 0 goto label1;

        $r0 = children[previousSiblingIndex];

        return $r0;

     label1:
        return null;
    }

    public static java.lang.String getTokenName(int)
    {
        int aID, $i0, $i1;
        java.lang.String name, $r6, $r11;
        java.lang.String[] $r0, $r1;
        java.lang.IllegalArgumentException $r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10;

        aID := @parameter0: int;

        if aID != -1 goto label1;

        return "EOF";

     label1:
        $r0 = <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils: java.lang.String[] TOKEN_VALUE_TO_NAME>;

        $i0 = lengthof $r0;

        $i1 = $i0 - 1;

        if aID <= $i1 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown javadoc token id. Given id: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(aID);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        $r1 = <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils: java.lang.String[] TOKEN_VALUE_TO_NAME>;

        name = $r1[aID];

        if name != null goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown javadoc token id. Given id: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(aID);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        return name;
    }

    public static int getTokenId(java.lang.String)
    {
        java.lang.String aName, $r6;
        java.lang.Integer id;
        com.google.common.collect.ImmutableMap $r0;
        java.lang.Object $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        aName := @parameter0: java.lang.String;

        $r0 = <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils: com.google.common.collect.ImmutableMap TOKEN_NAME_TO_VALUE>;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(aName);

        id = (java.lang.Integer) $r1;

        if id != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown javadoc token name. Given name ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(aName);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $i0 = virtualinvoke id.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    static void <clinit>()
    {
        com.google.common.collect.ImmutableMap$Builder builder;
        java.lang.reflect.Field[] fields, arr$;
        java.lang.String[] tempTokenValueToName, temp;
        int len$, i$, tokenValue, $i0, $i1, $i2, $i3, $i4;
        java.lang.reflect.Field f;
        java.lang.String name;
        java.lang.Class $r0, $r2, $r3;
        com.google.common.collect.ImmutableMap $r1;
        boolean $z0;
        java.lang.Integer $r5;
        java.lang.IllegalStateException $r6;
        java.lang.Exception $r7, tokenValue;

        builder = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();

        $r0 = class "com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes";

        fields = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        tempTokenValueToName = newarray (java.lang.String)[0];

        arr$ = fields;

        len$ = lengthof arr$;

        i$ = 0;

     label1:
        if i$ >= len$ goto label9;

        f = arr$[i$];

        $i0 = virtualinvoke f.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label8;

        $r3 = virtualinvoke f.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r3 == $r2 goto label2;

        goto label8;

     label2:
        name = virtualinvoke f.<java.lang.reflect.Field: java.lang.String getName()>();

     label3:
        tokenValue = virtualinvoke f.<java.lang.reflect.Field: int getInt(java.lang.Object)>(name);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(tokenValue);

        virtualinvoke builder.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(name, $r5);

        $i2 = lengthof tempTokenValueToName;

        $i1 = $i2 - 1;

        if tokenValue <= $i1 goto label4;

        $i4 = tokenValue + 1;

        temp = newarray (java.lang.String)[$i4];

        $i3 = lengthof tempTokenValueToName;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(tempTokenValueToName, 0, temp, 0, $i3);

        tempTokenValueToName = temp;

     label4:
        if tokenValue != -1 goto label5;

        tempTokenValueToName[0] = name;

        goto label6;

     label5:
        tempTokenValueToName[tokenValue] = name;

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        tokenValue = $r7;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to instantiate collection of Javadoc tokens", tokenValue);

        throw $r6;

     label8:
        i$ = i$ + 1;

        goto label1;

     label9:
        $r1 = virtualinvoke builder.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>();

        <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils: com.google.common.collect.ImmutableMap TOKEN_NAME_TO_VALUE> = $r1;

        <com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils: java.lang.String[] TOKEN_VALUE_TO_NAME> = tempTokenValueToName;

        return;

        catch java.lang.Exception from label3 to label6 with label7;
    }
}
