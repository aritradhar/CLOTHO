public class com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag extends java.lang.Object implements java.lang.Comparable
{
    private final java.lang.String mText;
    private int mFirstLine;
    private int mLastLine;
    private java.util.regex.Pattern mTagCheckRegexp;
    private java.util.regex.Pattern mTagMessageRegexp;
    final com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter this$0;

    public void <init>(com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter, java.lang.String, int) throws org.apache.commons.beanutils.ConversionException
    {
        com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag this;
        com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter l1;
        java.lang.String aText, format, $r1, $r4, $r5, $r7, $r9, $r17, $r19, $r25;
        int aLine, influence, $i0, $i1;
        java.lang.NumberFormatException e, $r12;
        java.util.regex.Pattern $r0, $r2, $r3, $r6, $r8, $r10;
        boolean $z0;
        org.apache.commons.beanutils.ConversionException $r11, $r23;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r20, $r21, $r22, $r24;
        java.util.regex.PatternSyntaxException $r18, influence;

        this := @this: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag;

        l1 := @parameter0: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter;

        aText := @parameter1: java.lang.String;

        aLine := @parameter2: int;

        this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter this$0> = l1;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: java.lang.String mText> = aText;

        $r0 = staticinvoke <com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter: java.util.regex.Pattern access$000(com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter)>(l1);

        this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: java.util.regex.Pattern mTagCheckRegexp> = $r0;

        format = "";

     label01:
        $r1 = staticinvoke <com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter: java.lang.String access$100(com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter)>(l1);

        $r2 = staticinvoke <com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter: java.util.regex.Pattern access$200(com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter)>(l1);

        format = specialinvoke this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: java.lang.String expandFromComment(java.lang.String,java.lang.String,java.util.regex.Pattern)>(aText, $r1, $r2);

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(format);

        this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: java.util.regex.Pattern mTagCheckRegexp> = $r3;

        $r4 = staticinvoke <com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter: java.lang.String access$300(com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter)>(l1);

        if $r4 == null goto label02;

        $r9 = staticinvoke <com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter: java.lang.String access$300(com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter)>(l1);

        $r8 = staticinvoke <com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter: java.util.regex.Pattern access$200(com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter)>(l1);

        format = specialinvoke this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: java.lang.String expandFromComment(java.lang.String,java.lang.String,java.util.regex.Pattern)>(aText, $r9, $r8);

        $r10 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(format);

        this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: java.util.regex.Pattern mTagMessageRegexp> = $r10;

     label02:
        influence = 0;

        $r5 = staticinvoke <com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter: java.lang.String access$400(com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter)>(l1);

        if $r5 == null goto label07;

        $r7 = staticinvoke <com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter: java.lang.String access$400(com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter)>(l1);

        $r6 = staticinvoke <com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter: java.util.regex.Pattern access$200(com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter)>(l1);

        format = specialinvoke this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: java.lang.String expandFromComment(java.lang.String,java.lang.String,java.util.regex.Pattern)>(aText, $r7, $r6);

     label03:
        $z0 = virtualinvoke format.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z0 == 0 goto label04;

        format = virtualinvoke format.<java.lang.String: java.lang.String substring(int)>(1);

     label04:
        influence = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(format);

     label05:
        goto label07;

     label06:
        $r12 := @caughtexception;

        e = $r12;

        $r11 = new org.apache.commons.beanutils.ConversionException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to parse influence from \'");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(aText);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' using ");

        $r19 = staticinvoke <com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter: java.lang.String access$400(com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter)>(l1);

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.commons.beanutils.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r17, e);

        throw $r11;

     label07:
        if influence < 0 goto label08;

        this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mFirstLine> = aLine;

        $i1 = aLine + influence;

        this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mLastLine> = $i1;

        goto label09;

     label08:
        $i0 = aLine + influence;

        this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mFirstLine> = $i0;

        this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mLastLine> = aLine;

     label09:
        goto label11;

     label10:
        $r18 := @caughtexception;

        influence = $r18;

        $r23 = new org.apache.commons.beanutils.ConversionException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to parse expanded comment ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(format);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.apache.commons.beanutils.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r25, influence);

        throw $r23;

     label11:
        return;

        catch java.lang.NumberFormatException from label03 to label05 with label06;
        catch java.util.regex.PatternSyntaxException from label01 to label09 with label10;
    }

    public java.lang.String getText()
    {
        com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag this;
        java.lang.String $r0;

        this := @this: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag;

        $r0 = this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: java.lang.String mText>;

        return $r0;
    }

    public int getFirstLine()
    {
        com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag this;
        int $i0;

        this := @this: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag;

        $i0 = this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mFirstLine>;

        return $i0;
    }

    public int getLastLine()
    {
        com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag this;
        int $i0;

        this := @this: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag;

        $i0 = this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mLastLine>;

        return $i0;
    }

    public int compareTo(com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag)
    {
        com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag this, aOther;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        this := @this: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag;

        aOther := @parameter0: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag;

        $i1 = this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mFirstLine>;

        $i0 = aOther.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mFirstLine>;

        if $i1 != $i0 goto label1;

        $i6 = this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mLastLine>;

        $i5 = aOther.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mLastLine>;

        $i7 = $i6 - $i5;

        return $i7;

     label1:
        $i3 = this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mFirstLine>;

        $i2 = aOther.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mFirstLine>;

        $i4 = $i3 - $i2;

        return $i4;
    }

    public boolean isMatch(com.puppycrawl.tools.checkstyle.api.AuditEvent)
    {
        com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag this;
        com.puppycrawl.tools.checkstyle.api.AuditEvent aEvent;
        int line, $i0, $i1;
        java.util.regex.Matcher tagMatcher, messageMatcher;
        java.util.regex.Pattern $r0, $r2, $r3;
        java.lang.String $r1, $r4;
        boolean $z0, $z1;

        this := @this: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag;

        aEvent := @parameter0: com.puppycrawl.tools.checkstyle.api.AuditEvent;

        line = virtualinvoke aEvent.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>();

        $i0 = this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mFirstLine>;

        if line >= $i0 goto label1;

        return 0;

     label1:
        $i1 = this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int mLastLine>;

        if line <= $i1 goto label2;

        return 0;

     label2:
        $r0 = this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: java.util.regex.Pattern mTagCheckRegexp>;

        $r1 = virtualinvoke aEvent.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getSourceName()>();

        tagMatcher = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke tagMatcher.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $r2 = this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: java.util.regex.Pattern mTagMessageRegexp>;

        if $r2 == null goto label4;

        $r3 = this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: java.util.regex.Pattern mTagMessageRegexp>;

        $r4 = virtualinvoke aEvent.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>();

        messageMatcher = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        $z1 = virtualinvoke messageMatcher.<java.util.regex.Matcher: boolean find()>();

        return $z1;

     label4:
        return 0;
    }

    private java.lang.String expandFromComment(java.lang.String, java.lang.String, java.util.regex.Pattern)
    {
        com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag this;
        java.lang.String aComment, aString, result, $r3, $r4;
        java.util.regex.Pattern aRegexp;
        java.util.regex.Matcher matcher;
        int i, $i0;
        boolean $z0;
        java.lang.StringBuilder $r0, $r1, $r2;

        this := @this: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag;

        aComment := @parameter0: java.lang.String;

        aString := @parameter1: java.lang.String;

        aRegexp := @parameter2: java.util.regex.Pattern;

        matcher = virtualinvoke aRegexp.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(aComment);

        $z0 = virtualinvoke matcher.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        return aString;

     label1:
        result = aString;

        i = 0;

     label2:
        $i0 = virtualinvoke matcher.<java.util.regex.Matcher: int groupCount()>();

        if i > $i0 goto label3;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\$");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(i);

        result = virtualinvoke result.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>($r3, $r4);

        i = i + 1;

        goto label2;

     label3:
        return result;
    }

    public final java.lang.String toString()
    {
        com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag this;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8;
        int $i0, $i1;
        java.lang.String $r6, $r9;

        this := @this: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tag[lines=[");

        $i0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int getFirstLine()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $i1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int getLastLine()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; text=\'");

        $r6 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: java.lang.String getText()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\']");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public volatile int compareTo(java.lang.Object)
    {
        com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag this, $r0;
        java.lang.Object x0;
        int $i0;

        this := @this: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag;

        x0 := @parameter0: java.lang.Object;

        $r0 = (com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag) x0;

        $i0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag: int compareTo(com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag)>($r0);

        return $i0;
    }
}
