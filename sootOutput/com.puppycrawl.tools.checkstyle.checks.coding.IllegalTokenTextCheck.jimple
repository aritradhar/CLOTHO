public class com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck extends com.puppycrawl.tools.checkstyle.checks.AbstractFormatCheck
{
    private java.lang.String mMessage;

    public void <init>()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck this;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.AbstractFormatCheck: void <init>(java.lang.String)>("$^");

        this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck: java.lang.String mMessage> = "";

        return;
    }

    public void beginTree(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aRootAST;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck;

        aRootAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        return;
    }

    public int[] getDefaultTokens()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck this;
        int[] $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck;

        $r0 = newarray (int)[0];

        return $r0;
    }

    public int[] getAcceptableTokens()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck this;
        java.util.Set tokenNames;
        int[] result;
        int i, $i0, $i1;
        java.util.Iterator i$;
        java.lang.String name;
        boolean $z0;
        java.lang.Object $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck;

        tokenNames = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck: java.util.Set getTokenNames()>();

        $i0 = interfaceinvoke tokenNames.<java.util.Set: int size()>();

        result = newarray (int)[$i0];

        i = 0;

        i$ = interfaceinvoke tokenNames.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r0 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        name = (java.lang.String) $r0;

        $i1 = staticinvoke <com.puppycrawl.tools.checkstyle.api.TokenTypes: int getTokenId(java.lang.String)>(name);

        result[i] = $i1;

        i = i + 1;

        goto label1;

     label2:
        return result;
    }

    public void visitToken(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST;
        java.lang.String text, message, $r2, $r4;
        java.util.regex.Pattern $r0;
        java.util.regex.Matcher $r1;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.Object[] $r3;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        text = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: java.lang.String getText()>();

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck: java.util.regex.Pattern getRegexp()>();

        $r1 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(text);

        $z0 = virtualinvoke $r1.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        message = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck: java.lang.String getMessage()>();

        $r2 = "";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(message);

        if $z1 == 0 goto label1;

        message = "illegal.token.text";

     label1:
        $i0 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i1 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getColumnNo()>();

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck: java.lang.String getFormat()>();

        $r3[0] = $r4;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck: void log(int,int,java.lang.String,java.lang.Object[])>($i0, $i1, message, $r3);

     label2:
        return;
    }

    public void setMessage(java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck this;
        java.lang.String aMessage, $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck;

        aMessage := @parameter0: java.lang.String;

        if null != aMessage goto label1;

        $r0 = "";

        goto label2;

     label1:
        $r0 = aMessage;

     label2:
        this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck: java.lang.String mMessage> = $r0;

        return;
    }

    public java.lang.String getMessage()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck this;
        java.lang.String $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck: java.lang.String mMessage>;

        return $r0;
    }

    public void setIgnoreCase(boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck this;
        boolean aCaseInsensitive;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck;

        aCaseInsensitive := @parameter0: boolean;

        if aCaseInsensitive == 0 goto label1;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck: void setCompileFlags(int)>(2);

     label1:
        return;
    }
}
