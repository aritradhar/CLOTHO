public final class com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck extends com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck
{

    public void <init>()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck this;
        java.lang.String[] $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck;

        $r0 = newarray (java.lang.String)[8];

        $r0[0] = "Exception";

        $r0[1] = "Error";

        $r0[2] = "RuntimeException";

        $r0[3] = "Throwable";

        $r0[4] = "java.lang.Error";

        $r0[5] = "java.lang.Exception";

        $r0[6] = "java.lang.RuntimeException";

        $r0[7] = "java.lang.Throwable";

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck: void <init>(java.lang.String[])>($r0);

        return;
    }

    public int[] getDefaultTokens()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck this;
        int[] $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck;

        $r0 = newarray (int)[1];

        $r0[0] = 98;

        return $r0;
    }

    public int[] getRequiredTokens()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck this;
        int[] $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck: int[] getDefaultTokens()>();

        return $r0;
    }

    public void visitToken(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aDetailAST, paramDef, excTypeParent, excType;
        java.util.List excTypes;
        java.util.Iterator i$;
        com.puppycrawl.tools.checkstyle.api.FullIdent ident;
        boolean $z0, $z1;
        java.lang.Object $r0;
        java.lang.String $r1, $r3;
        java.lang.Object[] $r2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck;

        aDetailAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        paramDef = virtualinvoke aDetailAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(21);

        excTypeParent = virtualinvoke paramDef.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(13);

        excTypes = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck: java.util.List getAllExceptionTypes(com.puppycrawl.tools.checkstyle.api.DetailAST)>(excTypeParent);

        i$ = interfaceinvoke excTypes.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r0 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        excType = (com.puppycrawl.tools.checkstyle.api.DetailAST) $r0;

        ident = staticinvoke <com.puppycrawl.tools.checkstyle.api.FullIdent: com.puppycrawl.tools.checkstyle.api.FullIdent createFullIdent(com.puppycrawl.tools.checkstyle.api.DetailAST)>(excType);

        $r1 = virtualinvoke ident.<com.puppycrawl.tools.checkstyle.api.FullIdent: java.lang.String getText()>();

        $z1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck: boolean isIllegalClassName(java.lang.String)>($r1);

        if $z1 == 0 goto label2;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke ident.<com.puppycrawl.tools.checkstyle.api.FullIdent: java.lang.String getText()>();

        $r2[0] = $r3;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck: void log(com.puppycrawl.tools.checkstyle.api.DetailAST,java.lang.String,java.lang.Object[])>(aDetailAST, "illegal.catch", $r2);

     label2:
        goto label1;

     label3:
        return;
    }

    public java.util.List getAllExceptionTypes(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aParentToken, currentNode, $r1;
        java.util.LinkedList exceptionTypes, $r0;
        int $i0;
        java.util.List $r2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck;

        aParentToken := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        currentNode = virtualinvoke aParentToken.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        exceptionTypes = $r0;

        $i0 = virtualinvoke currentNode.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i0 != 114 goto label1;

        $r2 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck: java.util.List getAllExceptionTypes(com.puppycrawl.tools.checkstyle.api.DetailAST)>(currentNode);

        interfaceinvoke exceptionTypes.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        currentNode = virtualinvoke currentNode.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        if currentNode == null goto label3;

        interfaceinvoke exceptionTypes.<java.util.List: boolean add(java.lang.Object)>(currentNode);

        goto label3;

     label1:
        interfaceinvoke exceptionTypes.<java.util.List: boolean add(java.lang.Object)>(currentNode);

     label2:
        $r1 = virtualinvoke currentNode.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        currentNode = $r1;

        if $r1 == null goto label3;

        interfaceinvoke exceptionTypes.<java.util.List: boolean add(java.lang.Object)>(currentNode);

        goto label2;

     label3:
        return exceptionTypes;
    }
}
