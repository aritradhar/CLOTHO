public class com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck extends com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck
{
    private boolean mShouldStartLine;

    public void <init>()
    {
        com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck this;
        com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck;

        $r0 = <com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption SAME>;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck: void <init>(java.lang.Enum,java.lang.Class)>($r0, class "com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyOption");

        this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: boolean mShouldStartLine> = 1;

        return;
    }

    public void setShouldStartLine(boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck this;
        boolean aFlag;

        this := @this: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck;

        aFlag := @parameter0: boolean;

        this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: boolean mShouldStartLine> = aFlag;

        return;
    }

    public int[] getDefaultTokens()
    {
        com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck this;
        int[] $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck;

        $r0 = newarray (int)[5];

        $r0[0] = 97;

        $r0[1] = 98;

        $r0[2] = 99;

        $r0[3] = 85;

        $r0[4] = 94;

        return $r0;
    }

    public int[] getAcceptableTokens()
    {
        com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck this;
        int[] $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck;

        $r0 = newarray (int)[13];

        $r0[0] = 97;

        $r0[1] = 98;

        $r0[2] = 99;

        $r0[3] = 85;

        $r0[4] = 94;

        $r0[5] = 14;

        $r0[6] = 9;

        $r0[7] = 8;

        $r0[8] = 93;

        $r0[9] = 86;

        $r0[10] = 87;

        $r0[11] = 12;

        $r0[12] = 11;

        return $r0;
    }

    public void visitToken(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST, rcurly, lcurly, nextToken, child;
        boolean shouldCheckLastRcurly, $z0, $z1, $z2, child;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Enum $r0, $r2, $r5;
        com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption $r1, $r3, $r4;
        java.lang.String[] $r6;
        java.lang.String $r7, $r16, $r19;
        java.lang.Object[] $r8, $r9, $r10, $r11, $r12;
        java.lang.RuntimeException $r13;
        java.lang.StringBuilder $r14, $r15, $r17, $r18;

        this := @this: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        shouldCheckLastRcurly = 0;

        $i0 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        lookupswitch($i0)
        {
            case 8: goto label08;
            case 9: goto label09;
            case 11: goto label08;
            case 12: goto label08;
            case 14: goto label07;
            case 85: goto label03;
            case 86: goto label09;
            case 87: goto label09;
            case 93: goto label09;
            case 94: goto label05;
            case 97: goto label01;
            case 98: goto label02;
            case 99: goto label06;
            default: goto label11;
        };

     label01:
        lcurly = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        nextToken = virtualinvoke lcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        rcurly = virtualinvoke lcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        goto label12;

     label02:
        nextToken = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        lcurly = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        rcurly = virtualinvoke lcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        if nextToken != null goto label12;

        shouldCheckLastRcurly = 1;

        nextToken = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: com.puppycrawl.tools.checkstyle.api.DetailAST getNextToken(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        goto label12;

     label03:
        nextToken = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(94);

        if nextToken == null goto label04;

        lcurly = virtualinvoke nextToken.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getPreviousSibling()>();

        rcurly = virtualinvoke lcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        goto label12;

     label04:
        shouldCheckLastRcurly = 1;

        nextToken = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: com.puppycrawl.tools.checkstyle.api.DetailAST getNextToken(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        lcurly = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        rcurly = virtualinvoke lcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        goto label12;

     label05:
        shouldCheckLastRcurly = 1;

        nextToken = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: com.puppycrawl.tools.checkstyle.api.DetailAST getNextToken(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        lcurly = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        rcurly = virtualinvoke lcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        goto label12;

     label06:
        shouldCheckLastRcurly = 1;

        nextToken = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: com.puppycrawl.tools.checkstyle.api.DetailAST getNextToken(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        lcurly = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        rcurly = virtualinvoke lcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        goto label12;

     label07:
        child = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        lcurly = virtualinvoke child.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        rcurly = virtualinvoke child.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        nextToken = aAST;

        goto label12;

     label08:
        lcurly = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(7);

        rcurly = virtualinvoke lcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        nextToken = aAST;

        goto label12;

     label09:
        lcurly = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(7);

        if lcurly != null goto label10;

        return;

     label10:
        rcurly = virtualinvoke lcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getLastChild()>();

        nextToken = aAST;

        goto label12;

     label11:
        $r13 = new java.lang.RuntimeException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected token type (");

        $i13 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        $r19 = staticinvoke <com.puppycrawl.tools.checkstyle.api.TokenTypes: java.lang.String getTokenName(int)>($i13);

        $r14 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label12:
        if rcurly == null goto label13;

        $i1 = virtualinvoke rcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i1 == 74 goto label14;

     label13:
        return;

     label14:
        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: java.lang.Enum getAbstractOption()>();

        $r1 = <com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption SAME>;

        if $r0 != $r1 goto label15;

        $z2 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: boolean hasLineBreakBefore(com.puppycrawl.tools.checkstyle.api.DetailAST)>(rcurly);

        if $z2 != 0 goto label15;

        $r11 = newarray (java.lang.Object)[0];

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: void log(com.puppycrawl.tools.checkstyle.api.DetailAST,java.lang.String,java.lang.Object[])>(rcurly, "line.break.before", $r11);

     label15:
        if shouldCheckLastRcurly == 0 goto label16;

        $i9 = virtualinvoke rcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i12 = virtualinvoke nextToken.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        if $i9 != $i12 goto label18;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = "}";

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: void log(com.puppycrawl.tools.checkstyle.api.DetailAST,java.lang.String,java.lang.Object[])>(rcurly, "line.alone", $r12);

        goto label18;

     label16:
        $r2 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: java.lang.Enum getAbstractOption()>();

        $r3 = <com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption SAME>;

        if $r2 != $r3 goto label17;

        $i10 = virtualinvoke rcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i11 = virtualinvoke nextToken.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        if $i10 == $i11 goto label17;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = "}";

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: void log(com.puppycrawl.tools.checkstyle.api.DetailAST,java.lang.String,java.lang.Object[])>(rcurly, "line.same", $r10);

        goto label18;

     label17:
        $r5 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: java.lang.Enum getAbstractOption()>();

        $r4 = <com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption ALONE>;

        if $r5 != $r4 goto label18;

        $i8 = virtualinvoke rcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i7 = virtualinvoke nextToken.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        if $i8 != $i7 goto label18;

        $z1 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: boolean isEmptyBody(com.puppycrawl.tools.checkstyle.api.DetailAST)>(lcurly);

        if $z1 != 0 goto label18;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = "}";

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: void log(com.puppycrawl.tools.checkstyle.api.DetailAST,java.lang.String,java.lang.Object[])>(rcurly, "line.alone", $r9);

     label18:
        $z0 = this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: boolean mShouldStartLine>;

        if $z0 != 0 goto label19;

        return;

     label19:
        $i2 = virtualinvoke rcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getColumnNo()>();

        $r6 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: java.lang.String[] getLines()>();

        $i3 = virtualinvoke rcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i4 = $i3 - 1;

        $r7 = $r6[$i4];

        child = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: boolean whitespaceBefore(int,java.lang.String)>($i2, $r7);

        if child != 0 goto label20;

        $i5 = virtualinvoke lcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i6 = virtualinvoke rcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        if $i5 == $i6 goto label20;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "}";

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck: void log(com.puppycrawl.tools.checkstyle.api.DetailAST,java.lang.String,java.lang.Object[])>(rcurly, "line.new", $r8);

     label20:
        return;
    }

    private boolean isEmptyBody(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aLcurly, $r0, $r1, $r2;
        boolean result;
        int $i0, $i1, $i2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck;

        aLcurly := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        result = 0;

        $r0 = virtualinvoke aLcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getParent()>();

        $i0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i0 != 6 goto label1;

        $r2 = virtualinvoke aLcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        $i2 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i2 != 74 goto label2;

        result = 1;

        goto label2;

     label1:
        $r1 = virtualinvoke aLcurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstChild()>();

        $i1 = virtualinvoke $r1.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i1 != 74 goto label2;

        result = 1;

     label2:
        return result;
    }

    private com.puppycrawl.tools.checkstyle.api.DetailAST getNextToken(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST, next, parent, $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        next = null;

        parent = aAST;

     label1:
        if parent == null goto label2;

        if next != null goto label2;

        next = virtualinvoke parent.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        parent = virtualinvoke parent.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getParent()>();

        goto label1;

     label2:
        $r0 = staticinvoke <com.puppycrawl.tools.checkstyle.checks.CheckUtils: com.puppycrawl.tools.checkstyle.api.DetailAST getFirstNode(com.puppycrawl.tools.checkstyle.api.DetailAST)>(next);

        return $r0;
    }

    private boolean hasLineBreakBefore(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aRightCurly, previousToken;
        int $i0, $i1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck;

        aRightCurly := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        if aRightCurly == null goto label1;

        previousToken = virtualinvoke aRightCurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getPreviousSibling()>();

        if previousToken == null goto label1;

        $i0 = virtualinvoke aRightCurly.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i1 = virtualinvoke previousToken.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        if $i0 != $i1 goto label1;

        return 0;

     label1:
        return 1;
    }
}
