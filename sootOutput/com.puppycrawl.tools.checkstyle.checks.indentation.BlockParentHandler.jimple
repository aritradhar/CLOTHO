public class com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler extends com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler
{
    private static final int[] CHECKED_CHILDREN;

    protected int[] getCheckedChildren()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        int[] $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        $r0 = <com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int[] CHECKED_CHILDREN>;

        return $r0;
    }

    public void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck, java.lang.String, com.puppycrawl.tools.checkstyle.api.DetailAST, com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck aIndentCheck;
        java.lang.String aName;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAst;
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler aParent;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        aIndentCheck := @parameter0: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck;

        aName := @parameter1: java.lang.String;

        aAst := @parameter2: com.puppycrawl.tools.checkstyle.api.DetailAST;

        aParent := @parameter3: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck,java.lang.String,com.puppycrawl.tools.checkstyle.api.DetailAST,com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler)>(aIndentCheck, aName, aAst, aParent);

        return;
    }

    protected com.puppycrawl.tools.checkstyle.api.DetailAST getToplevelAST()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getMainAst()>();

        return $r0;
    }

    protected void checkToplevelToken()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST toplevel;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r0;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        toplevel = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getToplevelAST()>();

        if toplevel == null goto label1;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()>();

        $i0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)>(toplevel);

        $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: boolean accept(int)>($i0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean hasLabelBefore()>();

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        $z2 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean toplevelMustStartLine()>();

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean startsLine(com.puppycrawl.tools.checkstyle.api.DetailAST)>(toplevel);

        if $z3 != 0 goto label3;

        return;

     label3:
        $i1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)>(toplevel);

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void logError(com.puppycrawl.tools.checkstyle.api.DetailAST,java.lang.String,int)>(toplevel, "", $i1);

        return;
    }

    protected boolean hasLabelBefore()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST parent, $r0, $r1;
        int $i0, $i1, $i2;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getToplevelAST()>();

        parent = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getParent()>();

        if parent == null goto label1;

        $i0 = virtualinvoke parent.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i0 != 22 goto label1;

        $i1 = virtualinvoke parent.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $r1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getToplevelAST()>();

        $i2 = virtualinvoke $r1.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        if $i1 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean toplevelMustStartLine()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        return 1;
    }

    protected boolean hasCurlys()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST $r0, $r1;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getLCurly()>();

        if $r0 == null goto label1;

        $r1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getRCurly()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected com.puppycrawl.tools.checkstyle.api.DetailAST getLCurly()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST $r0, $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getMainAst()>();

        $r1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(7);

        return $r1;
    }

    protected com.puppycrawl.tools.checkstyle.api.DetailAST getRCurly()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST slist, $r0, $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getMainAst()>();

        slist = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(7);

        if slist != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke slist.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(74);

        return $r1;
    }

    protected void checkLCurly()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST lcurly;
        int lcurlyPos;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r0;
        boolean $z0, $z1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        lcurly = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getLCurly()>();

        lcurlyPos = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)>(lcurly);

        if lcurly == null goto label1;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel curlyLevel()>();

        $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: boolean accept(int)>(lcurlyPos);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean startsLine(com.puppycrawl.tools.checkstyle.api.DetailAST)>(lcurly);

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void logError(com.puppycrawl.tools.checkstyle.api.DetailAST,java.lang.String,int)>(lcurly, "lcurly", lcurlyPos);

        return;
    }

    protected com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel curlyLevel()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r0, $r1;
        int[] $r2;
        int $i0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        $r0 = new com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        $r1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()>();

        $r2 = newarray (int)[1];

        $i0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int getBraceAdjustement()>();

        $r2[0] = $i0;

        specialinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,int[])>($r1, $r2);

        return $r0;
    }

    protected boolean rcurlyMustStart()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        return 1;
    }

    protected boolean childrenMayNest()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        return 0;
    }

    protected void checkRCurly()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST lcurly, rcurly;
        int rcurlyPos;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r0, $r1;
        boolean $z0, $z1, $z2, $z3;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        lcurly = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getLCurly()>();

        rcurly = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getRCurly()>();

        rcurlyPos = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)>(rcurly);

        if rcurly == null goto label2;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel curlyLevel()>();

        $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: boolean accept(int)>(rcurlyPos);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean rcurlyMustStart()>();

        if $z1 != 0 goto label1;

        $z3 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean startsLine(com.puppycrawl.tools.checkstyle.api.DetailAST)>(rcurly);

        if $z3 == 0 goto label2;

     label1:
        $z2 = staticinvoke <com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean areOnSameLine(com.puppycrawl.tools.checkstyle.api.DetailAST,com.puppycrawl.tools.checkstyle.api.DetailAST)>(rcurly, lcurly);

        if $z2 == 0 goto label3;

     label2:
        return;

     label3:
        $r1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel curlyLevel()>();

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void logError(com.puppycrawl.tools.checkstyle.api.DetailAST,java.lang.String,int,com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel)>(rcurly, "rcurly", rcurlyPos, $r1);

        return;
    }

    protected com.puppycrawl.tools.checkstyle.api.DetailAST getNonlistChild()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST $r0, $r1, $r2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getMainAst()>();

        $r1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(78);

        $r2 = virtualinvoke $r1.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        return $r2;
    }

    private void checkNonlistChild()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST nonlist;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel expected, $r0, $r1;
        int[] $r2;
        int $i0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        nonlist = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getNonlistChild()>();

        if nonlist != null goto label1;

        return;

     label1:
        $r0 = new com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        $r1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()>();

        $r2 = newarray (int)[1];

        $i0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int getBasicOffset()>();

        $r2[0] = $i0;

        specialinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,int[])>($r1, $r2);

        expected = $r0;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void checkExpressionSubtree(com.puppycrawl.tools.checkstyle.api.DetailAST,com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,boolean,boolean)>(nonlist, expected, 0, 0);

        return;
    }

    protected com.puppycrawl.tools.checkstyle.api.DetailAST getListChild()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST $r0, $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getMainAst()>();

        $r1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(7);

        return $r1;
    }

    protected com.puppycrawl.tools.checkstyle.api.DetailAST getRParen()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST $r0, $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getMainAst()>();

        $r1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(78);

        return $r1;
    }

    protected com.puppycrawl.tools.checkstyle.api.DetailAST getLParen()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST $r0, $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getMainAst()>();

        $r1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(77);

        return $r1;
    }

    public void checkIndentation()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST listChild, $r0, $r1, $r2, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;
        int[] $r3;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r4;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void checkToplevelToken()>();

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getLParen()>();

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void checkLParen(com.puppycrawl.tools.checkstyle.api.DetailAST)>($r0);

        $r1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getLParen()>();

        $r2 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getRParen()>();

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void checkRParen(com.puppycrawl.tools.checkstyle.api.DetailAST,com.puppycrawl.tools.checkstyle.api.DetailAST)>($r1, $r2);

        $z0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean hasCurlys()>();

        if $z0 == 0 goto label1;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void checkLCurly()>();

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void checkRCurly()>();

     label1:
        listChild = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getListChild()>();

        if listChild == null goto label3;

        $z1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean hasCurlys()>();

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getLCurly()>();

        $r6 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getRCurly()>();

        $z3 = staticinvoke <com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean areOnSameLine(com.puppycrawl.tools.checkstyle.api.DetailAST,com.puppycrawl.tools.checkstyle.api.DetailAST)>($r5, $r6);

        if $z3 != 0 goto label4;

     label2:
        $r3 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int[] getCheckedChildren()>();

        $r4 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getChildrenExpectedLevel()>();

        $z2 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean childrenMayNest()>();

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void checkChildren(com.puppycrawl.tools.checkstyle.api.DetailAST,int[],com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,boolean,boolean)>(listChild, $r3, $r4, 1, $z2);

        goto label4;

     label3:
        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void checkNonlistChild()>();

     label4:
        return;
    }

    protected com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getChildrenExpectedLevel()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel level, $r0, $r1, $r2, $r8, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        int[] $r3, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.puppycrawl.tools.checkstyle.api.DetailAST $r4, $r5, $r6, $r7, $r12;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()>();

        $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: boolean isMultiLevel()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean hasCurlys()>();

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getLCurly()>();

        $r5 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getRCurly()>();

        $z2 = staticinvoke <com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean areOnSameLine(com.puppycrawl.tools.checkstyle.api.DetailAST,com.puppycrawl.tools.checkstyle.api.DetailAST)>($r4, $r5);

        if $z2 != 0 goto label2;

        $r6 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getLCurly()>();

        $z3 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean startsLine(com.puppycrawl.tools.checkstyle.api.DetailAST)>($r6);

        if $z3 == 0 goto label1;

        $r11 = new com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        $r12 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getLCurly()>();

        $i5 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int expandedTabsColumnNo(com.puppycrawl.tools.checkstyle.api.DetailAST)>($r12);

        $i7 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int getBasicOffset()>();

        $i6 = $i5 + $i7;

        specialinvoke $r11.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: void <init>(int)>($i6);

        return $r11;

     label1:
        $r7 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getRCurly()>();

        $z4 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: boolean startsLine(com.puppycrawl.tools.checkstyle.api.DetailAST)>($r7);

        if $z4 == 0 goto label2;

        $r8 = new com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        $r10 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel curlyLevel()>();

        $r9 = newarray (int)[1];

        $i1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int getBasicOffset()>();

        $r9[0] = $i1;

        specialinvoke $r8.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,int[])>($r10, $r9);

        level = $r8;

        $i3 = virtualinvoke level.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: int getFirstIndentLevel()>();

        $i2 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int getLineWrappingIndent()>();

        $i4 = $i3 + $i2;

        virtualinvoke level.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: void addAcceptedIndent(int)>($i4);

        return level;

     label2:
        $r1 = new com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        $r2 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()>();

        $r3 = newarray (int)[1];

        $i0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int getBasicOffset()>();

        $r3[0] = $i0;

        specialinvoke $r1.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,int[])>($r2, $r3);

        return $r1;
    }

    public com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel suggestedChildLevel(com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler aChild;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        aChild := @parameter0: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getChildrenExpectedLevel()>();

        return $r0;
    }

    private int getLineWrappingIndent()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r0;
        int $i0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck getIndentCheck()>();

        $i0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck: int getLineWrappingIndentation()>();

        return $i0;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[7];

        $r0[0] = 10;

        $r0[1] = 29;

        $r0[2] = 6;

        $r0[3] = 88;

        $r0[4] = 90;

        $r0[5] = 92;

        $r0[6] = 89;

        <com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: int[] CHECKED_CHILDREN> = $r0;

        return;
    }
}
