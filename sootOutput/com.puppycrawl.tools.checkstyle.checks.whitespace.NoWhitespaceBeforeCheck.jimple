public class com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck extends com.puppycrawl.tools.checkstyle.api.Check
{
    private boolean mAllowLineBreaks;

    public void <init>()
    {
        com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck this;

        this := @this: com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.api.Check: void <init>()>();

        return;
    }

    public int[] getDefaultTokens()
    {
        com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck this;
        int[] $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck;

        $r0 = newarray (int)[3];

        $r0[0] = 46;

        $r0[1] = 25;

        $r0[2] = 26;

        return $r0;
    }

    public int[] getAcceptableTokens()
    {
        com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck this;
        int[] $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck;

        $r0 = newarray (int)[4];

        $r0[0] = 46;

        $r0[1] = 25;

        $r0[2] = 26;

        $r0[3] = 60;

        return $r0;
    }

    public void visitToken(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST, sibling;
        java.lang.String[] lines;
        java.lang.String line, $r1;
        int before, i, $i0, $i1, $i2, $i3, $i4, $i6, $i7;
        boolean $z0, $z1, $z2, $z3, sibling;
        java.lang.Object[] $r0;
        char $c5, $c8;

        this := @this: com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        lines = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck: java.lang.String[] getLines()>();

        $i0 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $i1 = $i0 - 1;

        line = lines[$i1];

        $i2 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getColumnNo()>();

        before = $i2 - 1;

        if before < 0 goto label1;

        $c8 = virtualinvoke line.<java.lang.String: char charAt(int)>(before);

        $z3 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c8);

        if $z3 == 0 goto label8;

     label1:
        $i3 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i3 != 46 goto label2;

        sibling = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getPreviousSibling()>();

        if sibling == null goto label2;

        $i7 = virtualinvoke sibling.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i7 != 36 goto label2;

        $i6 = virtualinvoke sibling.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getChildCount()>();

        if $i6 != 0 goto label2;

        return;

     label2:
        $z0 = this.<com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck: boolean mAllowLineBreaks>;

        if $z0 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        sibling = $z2;

        i = 0;

     label5:
        if sibling != 0 goto label7;

        if i >= before goto label7;

        $c5 = virtualinvoke line.<java.lang.String: char charAt(int)>(i);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c5);

        if $z1 != 0 goto label6;

        sibling = 1;

     label6:
        i = i + 1;

        goto label5;

     label7:
        if sibling == 0 goto label8;

        $i4 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $r0 = newarray (java.lang.Object)[1];

        $r1 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: java.lang.String getText()>();

        $r0[0] = $r1;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck: void log(int,int,java.lang.String,java.lang.Object[])>($i4, before, "ws.preceded", $r0);

     label8:
        return;
    }

    public void setAllowLineBreaks(boolean)
    {
        com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck this;
        boolean aAllowLineBreaks;

        this := @this: com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck;

        aAllowLineBreaks := @parameter0: boolean;

        this.<com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck: boolean mAllowLineBreaks> = aAllowLineBreaks;

        return;
    }
}
