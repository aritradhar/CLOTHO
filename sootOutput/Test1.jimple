public class Test1 extends java.lang.Object
{

    public static void main(java.lang.String[])
    {
        java.lang.String[] ar;
        int[] array, temp$0;
        int a, b, c, out, temp$2;
        Test1 temp$1;
        java.io.PrintStream temp$3;

        ar := @parameter0: java.lang.String[];
        temp$0 = newarray (int)[4];
        temp$0[0] = 10;
        temp$0[1] = 11;
        temp$0[2] = 12;
        temp$0[3] = 13;
        array = temp$0;
        a = 0;
        b = 2;
        c = -1;
        temp$1 = new Test1;
        specialinvoke temp$1.<Test1: void <init>()>();
        temp$2 = virtualinvoke temp$1.<Test1: int fun(int[],int,int,int)>(array, a, b, c);
        out = temp$2;
        temp$3 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$3.<java.io.PrintStream: void println(int)>(out);
        return;
    }

    public void fun1()
    {
        Test1 this;

        this := @this: Test1;
        return;
    }

    public int fun(int[], int, int, int)
    {
        Test1 this, temp$10;
        int[] array, arr, temp$5, temp$7, temp$12;
        int a, b, c, index, temp$3, index1, temp$4, x, temp$6, y, temp$8, temp$9, temp$13, temp$14, temp$15;
        java.lang.Integer[] arri;
        java.io.PrintStream temp$0, temp$11;
        java.lang.StringBuffer temp$1;
        java.lang.String temp$2;

        this := @this: Test1;
        array := @parameter0: int[];
        a := @parameter1: int;
        b := @parameter2: int;
        c := @parameter3: int;
        arr = newarray (int)[c];
        arri = newarray (java.lang.Integer)[c];
        temp$0 = <java.lang.System: java.io.PrintStream out>;
        temp$1 = new java.lang.StringBuffer;
        specialinvoke temp$1.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(a);
        virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" ");
        virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(b);
        temp$2 = virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$0.<java.io.PrintStream: void println(java.lang.String)>(temp$2);
        temp$3 = a;
        index = temp$3 + b;
        temp$4 = a / b;
        index1 = temp$4;
        temp$5 = array;
        temp$6 = index;
        x = temp$5[temp$6];
        temp$7 = array;
        temp$8 = a - b;
        temp$9 = temp$8;
        y = temp$7[temp$9];
        temp$10 = new Test1;
        specialinvoke temp$10.<Test1: void <init>()>();
        virtualinvoke temp$10.<Test1: void fun1()>();
        temp$11 = <java.lang.System: java.io.PrintStream out>;
        temp$12 = arr;
        temp$13 = index;
        temp$14 = temp$13 + 3;
        temp$15 = temp$12[temp$14];
        virtualinvoke temp$11.<java.io.PrintStream: void println(int)>(temp$15);
        return y;
    }

    public void <init>()
    {
        Test1 this;

        this := @this: Test1;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }
}
