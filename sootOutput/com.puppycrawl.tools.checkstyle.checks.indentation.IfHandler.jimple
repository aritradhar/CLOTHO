public class com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler extends com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler
{

    public void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck, com.puppycrawl.tools.checkstyle.api.DetailAST, com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck aIndentCheck;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAst;
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler aParent;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler;

        aIndentCheck := @parameter0: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck;

        aAst := @parameter1: com.puppycrawl.tools.checkstyle.api.DetailAST;

        aParent := @parameter2: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck,java.lang.String,com.puppycrawl.tools.checkstyle.api.DetailAST,com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler)>(aIndentCheck, "if", aAst, aParent);

        return;
    }

    public com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel suggestedChildLevel(com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler)
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler aChild;
        boolean $z0;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r0, $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler;

        aChild := @parameter0: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler;

        $z0 = aChild instanceof com.puppycrawl.tools.checkstyle.checks.indentation.ElseHandler;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()>();

        return $r1;

     label1:
        $r0 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel suggestedChildLevel(com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler)>(aChild);

        return $r0;
    }

    protected com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevelImpl()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler this;
        boolean $z0;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel $r0, $r2;
        com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler;

        $z0 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler: boolean isIfAfterElse()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler getParent()>();

        $r2 = virtualinvoke $r1.<com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()>();

        return $r2;

     label1:
        $r0 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevelImpl()>();

        return $r0;
    }

    private boolean isIfAfterElse()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST parent, $r0, $r1;
        int $i0, $i1, $i2;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getMainAst()>();

        parent = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getParent()>();

        $i0 = virtualinvoke parent.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i0 != 94 goto label1;

        $i1 = virtualinvoke parent.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        $r1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getMainAst()>();

        $i2 = virtualinvoke $r1.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getLineNo()>();

        if $i1 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void checkToplevelToken()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler this;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler;

        $z0 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler: boolean isIfAfterElse()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void checkToplevelToken()>();

        return;
    }

    private void checkCondExpr()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler this;
        com.puppycrawl.tools.checkstyle.api.DetailAST condAst, $r0, $r1;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel expected, $r2, $r3;
        int[] $r4;
        int $i0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler;

        $r0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getMainAst()>();

        $r1 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(77);

        condAst = virtualinvoke $r1.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getNextSibling()>();

        $r2 = new com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;

        $r3 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel getLevel()>();

        $r4 = newarray (int)[1];

        $i0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler: int getBasicOffset()>();

        $r4[0] = $i0;

        specialinvoke $r2.<com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel: void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,int[])>($r3, $r4);

        expected = $r2;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler: void checkExpressionSubtree(com.puppycrawl.tools.checkstyle.api.DetailAST,com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel,boolean,boolean)>(condAst, expected, 0, 0);

        return;
    }

    public void checkIndentation()
    {
        com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler this;
        com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler$1 lineWrap, $r0;
        com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck $r1;
        com.puppycrawl.tools.checkstyle.api.DetailAST $r2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler: void checkIndentation()>();

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler: void checkCondExpr()>();

        $r0 = new com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler$1;

        $r1 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck getIndentCheck()>();

        $r2 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler: com.puppycrawl.tools.checkstyle.api.DetailAST getMainAst()>();

        specialinvoke $r0.<com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler$1: void <init>(com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler,com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck,com.puppycrawl.tools.checkstyle.api.DetailAST)>(this, $r1, $r2);

        lineWrap = $r0;

        virtualinvoke lineWrap.<com.puppycrawl.tools.checkstyle.checks.indentation.LineWrappingHandler: void checkIndentation()>();

        return;
    }
}
