public final class com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck extends com.puppycrawl.tools.checkstyle.checks.AbstractFormatCheck
{
    private static final java.lang.String DEFAULT_FORMAT;
    private static final java.lang.String[] DEFAULT_LEGAL_ABSTRACT_NAMES;
    private static final java.lang.String[] DEFAULT_ILLEGAL_TYPES;
    private static final java.lang.String[] DEFAULT_IGNORED_METHOD_NAMES;
    private final java.util.Set mIllegalClassNames;
    private final java.util.Set mLegalAbstractClassNames;
    private final java.util.Set mIgnoredMethodNames;

    public void <init>()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        java.util.HashSet $r0, $r1, $r2;
        java.lang.String[] $r3, $r4, $r5;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.AbstractFormatCheck: void <init>(java.lang.String)>("^(.*[\\.])?Abstract.*$");

        $r0 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mIllegalClassNames> = $r0;

        $r1 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mLegalAbstractClassNames> = $r1;

        $r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mIgnoredMethodNames> = $r2;

        $r3 = <com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.lang.String[] DEFAULT_ILLEGAL_TYPES>;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: void setIllegalClassNames(java.lang.String[])>($r3);

        $r4 = <com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.lang.String[] DEFAULT_LEGAL_ABSTRACT_NAMES>;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: void setLegalAbstractClassNames(java.lang.String[])>($r4);

        $r5 = <com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.lang.String[] DEFAULT_IGNORED_METHOD_NAMES>;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: void setIgnoredMethodNames(java.lang.String[])>($r5);

        return;
    }

    public int[] getDefaultTokens()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        int[] $r0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        $r0 = newarray (int)[3];

        $r0[0] = 10;

        $r0[1] = 21;

        $r0[2] = 9;

        return $r0;
    }

    public void visitToken(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST;
        int $i0;
        java.lang.IllegalStateException $r0;
        java.lang.String $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        $i0 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        lookupswitch($i0)
        {
            case 9: goto label1;
            case 10: goto label2;
            case 21: goto label3;
            default: goto label4;
        };

     label1:
        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: void visitMethodDef(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        goto label5;

     label2:
        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: void visitVariableDef(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        goto label5;

     label3:
        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: void visitParameterDef(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        goto label5;

     label4:
        $r0 = new java.lang.IllegalStateException;

        $r1 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r0;

     label5:
        return;
    }

    private void visitMethodDef(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        $z0 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: boolean isCheckedMethod(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        if $z0 == 0 goto label1;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: void checkClassName(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

     label1:
        return;
    }

    private void visitParameterDef(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST, grandParentAST, $r0;
        int $i0;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        $r0 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getParent()>();

        grandParentAST = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST getParent()>();

        $i0 = virtualinvoke grandParentAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: int getType()>();

        if $i0 != 9 goto label1;

        $z0 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: boolean isCheckedMethod(com.puppycrawl.tools.checkstyle.api.DetailAST)>(grandParentAST);

        if $z0 == 0 goto label1;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: void checkClassName(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

     label1:
        return;
    }

    private void visitVariableDef(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: void checkClassName(com.puppycrawl.tools.checkstyle.api.DetailAST)>(aAST);

        return;
    }

    private void checkClassName(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST, type;
        com.puppycrawl.tools.checkstyle.api.FullIdent ident;
        java.lang.String $r0, $r2;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object[] $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        type = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(13);

        ident = staticinvoke <com.puppycrawl.tools.checkstyle.checks.CheckUtils: com.puppycrawl.tools.checkstyle.api.FullIdent createFullType(com.puppycrawl.tools.checkstyle.api.DetailAST)>(type);

        $r0 = virtualinvoke ident.<com.puppycrawl.tools.checkstyle.api.FullIdent: java.lang.String getText()>();

        $z0 = specialinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: boolean isMatchingClassName(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke ident.<com.puppycrawl.tools.checkstyle.api.FullIdent: int getLineNo()>();

        $i1 = virtualinvoke ident.<com.puppycrawl.tools.checkstyle.api.FullIdent: int getColumnNo()>();

        $r1 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke ident.<com.puppycrawl.tools.checkstyle.api.FullIdent: java.lang.String getText()>();

        $r1[0] = $r2;

        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: void log(int,int,java.lang.String,java.lang.Object[])>($i0, $i1, "illegal.type", $r1);

     label1:
        return;
    }

    private boolean isMatchingClassName(java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        java.lang.String aClassName;
        java.util.Set $r0, $r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        aClassName := @parameter0: java.lang.String;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mIllegalClassNames>;

        $z0 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>(aClassName);

        if $z0 != 0 goto label1;

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mLegalAbstractClassNames>;

        $z1 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(aClassName);

        if $z1 != 0 goto label2;

        $r2 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.regex.Pattern getRegexp()>();

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(aClassName);

        $z3 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z3 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private boolean isCheckedMethod(com.puppycrawl.tools.checkstyle.api.DetailAST)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        com.puppycrawl.tools.checkstyle.api.DetailAST aAST, $r0;
        java.lang.String methodName;
        java.util.Set $r1;
        boolean $z0, $z1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        aAST := @parameter0: com.puppycrawl.tools.checkstyle.api.DetailAST;

        $r0 = virtualinvoke aAST.<com.puppycrawl.tools.checkstyle.api.DetailAST: com.puppycrawl.tools.checkstyle.api.DetailAST findFirstToken(int)>(59);

        methodName = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.DetailAST: java.lang.String getText()>();

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mIgnoredMethodNames>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(methodName);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setIllegalClassNames(java.lang.String[])
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        java.lang.String[] aClassNames, arr$;
        int len$, i$, lastDot, $i0, $i1, $i2, $i3;
        java.lang.String name, shortName;
        java.util.Set $r0, $r1, $r2;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        aClassNames := @parameter0: java.lang.String[];

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mIllegalClassNames>;

        interfaceinvoke $r0.<java.util.Set: void clear()>();

        arr$ = aClassNames;

        len$ = lengthof arr$;

        i$ = 0;

     label1:
        if i$ >= len$ goto label3;

        name = arr$[i$];

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mIllegalClassNames>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(name);

        lastDot = virtualinvoke name.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        if lastDot <= 0 goto label2;

        $i0 = virtualinvoke name.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        if lastDot >= $i1 goto label2;

        $i2 = virtualinvoke name.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i3 = $i2 + 1;

        shortName = virtualinvoke name.<java.lang.String: java.lang.String substring(int)>($i3);

        $r2 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mIllegalClassNames>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(shortName);

     label2:
        i$ = i$ + 1;

        goto label1;

     label3:
        return;
    }

    public java.lang.String[] getIllegalClassNames()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        java.util.Set $r0, $r1;
        int $i0;
        java.lang.String[] $r2, $r4;
        java.lang.Object[] $r3;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mIllegalClassNames>;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mIllegalClassNames>;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $r2 = newarray (java.lang.String)[$i0];

        $r3 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.String[]) $r3;

        return $r4;
    }

    public void setIgnoredMethodNames(java.lang.String[])
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        java.lang.String[] aMethodNames, arr$;
        int len$, i$;
        java.lang.String element;
        java.util.Set $r0, $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        aMethodNames := @parameter0: java.lang.String[];

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mIgnoredMethodNames>;

        interfaceinvoke $r0.<java.util.Set: void clear()>();

        arr$ = aMethodNames;

        len$ = lengthof arr$;

        i$ = 0;

     label1:
        if i$ >= len$ goto label2;

        element = arr$[i$];

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mIgnoredMethodNames>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(element);

        i$ = i$ + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String[] getIgnoredMethodNames()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        java.util.Set $r0, $r1;
        int $i0;
        java.lang.String[] $r2, $r4;
        java.lang.Object[] $r3;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mIgnoredMethodNames>;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mIgnoredMethodNames>;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $r2 = newarray (java.lang.String)[$i0];

        $r3 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.String[]) $r3;

        return $r4;
    }

    public void setLegalAbstractClassNames(java.lang.String[])
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        java.lang.String[] aClassNames, arr$;
        int len$, i$;
        java.lang.String element;
        java.util.Set $r0, $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        aClassNames := @parameter0: java.lang.String[];

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mLegalAbstractClassNames>;

        interfaceinvoke $r0.<java.util.Set: void clear()>();

        arr$ = aClassNames;

        len$ = lengthof arr$;

        i$ = 0;

     label1:
        if i$ >= len$ goto label2;

        element = arr$[i$];

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mLegalAbstractClassNames>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(element);

        i$ = i$ + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String[] getLegalAbstractClassNames()
    {
        com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck this;
        java.util.Set $r0, $r1;
        int $i0;
        java.lang.String[] $r2, $r4;
        java.lang.Object[] $r3;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mLegalAbstractClassNames>;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.util.Set mLegalAbstractClassNames>;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $r2 = newarray (java.lang.String)[$i0];

        $r3 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.String[]) $r3;

        return $r4;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r2;

        <com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.lang.String DEFAULT_FORMAT> = "^(.*[\\.])?Abstract.*$";

        $r0 = newarray (java.lang.String)[0];

        <com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.lang.String[] DEFAULT_LEGAL_ABSTRACT_NAMES> = $r0;

        $r1 = newarray (java.lang.String)[22];

        $r1[0] = "GregorianCalendar";

        $r1[1] = "Hashtable";

        $r1[2] = "HashSet";

        $r1[3] = "HashMap";

        $r1[4] = "ArrayList";

        $r1[5] = "LinkedList";

        $r1[6] = "LinkedHashMap";

        $r1[7] = "LinkedHashSet";

        $r1[8] = "TreeSet";

        $r1[9] = "TreeMap";

        $r1[10] = "Vector";

        $r1[11] = "java.util.GregorianCalendar";

        $r1[12] = "java.util.Hashtable";

        $r1[13] = "java.util.HashSet";

        $r1[14] = "java.util.HashMap";

        $r1[15] = "java.util.ArrayList";

        $r1[16] = "java.util.LinkedList";

        $r1[17] = "java.util.LinkedHashMap";

        $r1[18] = "java.util.LinkedHashSet";

        $r1[19] = "java.util.TreeSet";

        $r1[20] = "java.util.TreeMap";

        $r1[21] = "java.util.Vector";

        <com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.lang.String[] DEFAULT_ILLEGAL_TYPES> = $r1;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "getInitialContext";

        $r2[1] = "getEnvironment";

        <com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck: java.lang.String[] DEFAULT_IGNORED_METHOD_NAMES> = $r2;

        return;
    }
}
