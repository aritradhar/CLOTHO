public abstract class com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck extends com.puppycrawl.tools.checkstyle.api.Check
{
    private final java.util.Set mIllegalClassNames;
    static final boolean $assertionsDisabled;

    protected void <init>(java.lang.String[])
    {
        com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck this;
        java.lang.String[] aInitialNames;
        java.util.HashSet $r0;
        boolean $z0;
        java.lang.AssertionError $r1;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck;

        aInitialNames := @parameter0: java.lang.String[];

        specialinvoke this.<com.puppycrawl.tools.checkstyle.api.Check: void <init>()>();

        $r0 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        this.<com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck: java.util.Set mIllegalClassNames> = $r0;

        $z0 = <com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if aInitialNames != null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        virtualinvoke this.<com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck: void setIllegalClassNames(java.lang.String[])>(aInitialNames);

        return;
    }

    protected final boolean isIllegalClassName(java.lang.String)
    {
        com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck this;
        java.lang.String aIdent;
        java.util.Set $r0;
        boolean $z0;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck;

        aIdent := @parameter0: java.lang.String;

        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck: java.util.Set mIllegalClassNames>;

        $z0 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>(aIdent);

        return $z0;
    }

    public final void setIllegalClassNames(java.lang.String[])
    {
        com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck this;
        java.lang.String[] aClassNames, arr$;
        int len$, i$, lastDot, $i0, $i1, $i2, $i3;
        java.lang.String name, shortName;
        boolean $z0;
        java.util.Set $r0, $r1, $r2;
        java.lang.AssertionError $r3;

        this := @this: com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck;

        aClassNames := @parameter0: java.lang.String[];

        $z0 = <com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if aClassNames != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r0 = this.<com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck: java.util.Set mIllegalClassNames>;

        interfaceinvoke $r0.<java.util.Set: void clear()>();

        arr$ = aClassNames;

        len$ = lengthof arr$;

        i$ = 0;

     label2:
        if i$ >= len$ goto label4;

        name = arr$[i$];

        $r1 = this.<com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck: java.util.Set mIllegalClassNames>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(name);

        lastDot = virtualinvoke name.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        if lastDot <= 0 goto label3;

        $i0 = virtualinvoke name.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        if lastDot >= $i1 goto label3;

        $i2 = virtualinvoke name.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i3 = $i2 + 1;

        shortName = virtualinvoke name.<java.lang.String: java.lang.String substring(int)>($i3);

        $r2 = this.<com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck: java.util.Set mIllegalClassNames>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(shortName);

     label3:
        i$ = i$ + 1;

        goto label2;

     label4:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/puppycrawl/tools/checkstyle/checks/coding/AbstractIllegalCheck";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck: boolean $assertionsDisabled> = $z1;

        return;
    }
}
